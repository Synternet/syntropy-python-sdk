# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WgCreateInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "fn": "str",
        "args": "WgCreateInterfaceArgs",
        "metadata": "WgCreateInterfaceMetadata",
    }

    attribute_map = {"fn": "fn", "args": "args", "metadata": "metadata"}

    def __init__(self, fn=None, args=None, metadata=None):  # noqa: E501
        """WgCreateInterface - a model defined in Swagger"""  # noqa: E501
        self._fn = None
        self._args = None
        self._metadata = None
        self.discriminator = None
        self.fn = fn
        self.args = args
        self.metadata = metadata

    @property
    def fn(self):
        """Gets the fn of this WgCreateInterface.  # noqa: E501


        :return: The fn of this WgCreateInterface.  # noqa: E501
        :rtype: str
        """
        return self._fn

    @fn.setter
    def fn(self, fn):
        """Sets the fn of this WgCreateInterface.


        :param fn: The fn of this WgCreateInterface.  # noqa: E501
        :type: str
        """
        if fn is None:
            raise ValueError("Invalid value for `fn`, must not be `None`")  # noqa: E501
        allowed_values = ["create_interface"]  # noqa: E501
        if fn not in allowed_values:
            raise ValueError(
                "Invalid value for `fn` ({0}), must be one of {1}".format(  # noqa: E501
                    fn, allowed_values
                )
            )

        self._fn = fn

    @property
    def args(self):
        """Gets the args of this WgCreateInterface.  # noqa: E501


        :return: The args of this WgCreateInterface.  # noqa: E501
        :rtype: WgCreateInterfaceArgs
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this WgCreateInterface.


        :param args: The args of this WgCreateInterface.  # noqa: E501
        :type: WgCreateInterfaceArgs
        """
        if args is None:
            raise ValueError(
                "Invalid value for `args`, must not be `None`"
            )  # noqa: E501

        self._args = args

    @property
    def metadata(self):
        """Gets the metadata of this WgCreateInterface.  # noqa: E501


        :return: The metadata of this WgCreateInterface.  # noqa: E501
        :rtype: WgCreateInterfaceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this WgCreateInterface.


        :param metadata: The metadata of this WgCreateInterface.  # noqa: E501
        :type: WgCreateInterfaceMetadata
        """
        if metadata is None:
            raise ValueError(
                "Invalid value for `metadata`, must not be `None`"
            )  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WgCreateInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WgCreateInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
