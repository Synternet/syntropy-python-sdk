# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WgCreateInterfaceArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "public_key": "str",
        "listen_port": "float",
        "internal_ip": "str",
        "ifname": "str",
    }

    attribute_map = {
        "public_key": "public_key",
        "listen_port": "listen_port",
        "internal_ip": "internal_ip",
        "ifname": "ifname",
    }

    def __init__(
        self, public_key=None, listen_port=None, internal_ip=None, ifname=None
    ):  # noqa: E501
        """WgCreateInterfaceArgs - a model defined in Swagger"""  # noqa: E501
        self._public_key = None
        self._listen_port = None
        self._internal_ip = None
        self._ifname = None
        self.discriminator = None
        if public_key is not None:
            self.public_key = public_key
        if listen_port is not None:
            self.listen_port = listen_port
        self.internal_ip = internal_ip
        self.ifname = ifname

    @property
    def public_key(self):
        """Gets the public_key of this WgCreateInterfaceArgs.  # noqa: E501


        :return: The public_key of this WgCreateInterfaceArgs.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this WgCreateInterfaceArgs.


        :param public_key: The public_key of this WgCreateInterfaceArgs.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def listen_port(self):
        """Gets the listen_port of this WgCreateInterfaceArgs.  # noqa: E501


        :return: The listen_port of this WgCreateInterfaceArgs.  # noqa: E501
        :rtype: float
        """
        return self._listen_port

    @listen_port.setter
    def listen_port(self, listen_port):
        """Sets the listen_port of this WgCreateInterfaceArgs.


        :param listen_port: The listen_port of this WgCreateInterfaceArgs.  # noqa: E501
        :type: float
        """

        self._listen_port = listen_port

    @property
    def internal_ip(self):
        """Gets the internal_ip of this WgCreateInterfaceArgs.  # noqa: E501


        :return: The internal_ip of this WgCreateInterfaceArgs.  # noqa: E501
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this WgCreateInterfaceArgs.


        :param internal_ip: The internal_ip of this WgCreateInterfaceArgs.  # noqa: E501
        :type: str
        """
        if internal_ip is None:
            raise ValueError(
                "Invalid value for `internal_ip`, must not be `None`"
            )  # noqa: E501

        self._internal_ip = internal_ip

    @property
    def ifname(self):
        """Gets the ifname of this WgCreateInterfaceArgs.  # noqa: E501


        :return: The ifname of this WgCreateInterfaceArgs.  # noqa: E501
        :rtype: str
        """
        return self._ifname

    @ifname.setter
    def ifname(self, ifname):
        """Sets the ifname of this WgCreateInterfaceArgs.


        :param ifname: The ifname of this WgCreateInterfaceArgs.  # noqa: E501
        :type: str
        """
        if ifname is None:
            raise ValueError(
                "Invalid value for `ifname`, must not be `None`"
            )  # noqa: E501

        self._ifname = ifname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WgCreateInterfaceArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WgCreateInterfaceArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
