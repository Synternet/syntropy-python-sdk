# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AgentSuccessResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "type": "AgentMessageType",
        "executed_at": "str",
        "data": "AgentMessagePayload",
    }

    attribute_map = {
        "id": "id",
        "type": "type",
        "executed_at": "executed_at",
        "data": "data",
    }

    def __init__(self, id=None, type=None, executed_at=None, data=None):  # noqa: E501
        """AgentSuccessResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._executed_at = None
        self._data = None
        self.discriminator = None
        self.id = id
        self.type = type
        self.executed_at = executed_at
        self.data = data

    @property
    def id(self):
        """Gets the id of this AgentSuccessResponse.  # noqa: E501


        :return: The id of this AgentSuccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AgentSuccessResponse.


        :param id: The id of this AgentSuccessResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this AgentSuccessResponse.  # noqa: E501


        :return: The type of this AgentSuccessResponse.  # noqa: E501
        :rtype: AgentMessageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AgentSuccessResponse.


        :param type: The type of this AgentSuccessResponse.  # noqa: E501
        :type: AgentMessageType
        """
        if type is None:
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501

        self._type = type

    @property
    def executed_at(self):
        """Gets the executed_at of this AgentSuccessResponse.  # noqa: E501


        :return: The executed_at of this AgentSuccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._executed_at

    @executed_at.setter
    def executed_at(self, executed_at):
        """Sets the executed_at of this AgentSuccessResponse.


        :param executed_at: The executed_at of this AgentSuccessResponse.  # noqa: E501
        :type: str
        """
        if executed_at is None:
            raise ValueError(
                "Invalid value for `executed_at`, must not be `None`"
            )  # noqa: E501

        self._executed_at = executed_at

    @property
    def data(self):
        """Gets the data of this AgentSuccessResponse.  # noqa: E501


        :return: The data of this AgentSuccessResponse.  # noqa: E501
        :rtype: AgentMessagePayload
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AgentSuccessResponse.


        :param data: The data of this AgentSuccessResponse.  # noqa: E501
        :type: AgentMessagePayload
        """
        if data is None:
            raise ValueError(
                "Invalid value for `data`, must not be `None`"
            )  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AgentSuccessResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentSuccessResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
