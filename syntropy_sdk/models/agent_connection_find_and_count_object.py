# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from syntropy_sdk.models.tsoa_pick_agent_connection_or_agent_connection_id_or_agent_connection_updated_at_or_agent_connection_link_tag_or_agent_connection_status_or_agent_connection_status_reason_ import (  # noqa: F401,E501
    TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_,
)


class AgentConnectionFindAndCountObject(
    TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "agent_interface_2": "AgentInterfaceModelObject",
        "agent_interface_1": "AgentInterfaceModelObject",
        "agent_2": "AgentConnectionAgentObject",
        "agent_1": "AgentConnectionAgentObject",
        "agent_connection_subnets_enabled_count": "float",
    }
    if hasattr(
        TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_,
        "swagger_types",
    ):
        swagger_types.update(
            TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_.swagger_types
        )

    attribute_map = {
        "agent_interface_2": "agent_interface_2",
        "agent_interface_1": "agent_interface_1",
        "agent_2": "agent_2",
        "agent_1": "agent_1",
        "agent_connection_subnets_enabled_count": "agent_connection_subnets_enabled_count",
    }
    if hasattr(
        TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_,
        "attribute_map",
    ):
        attribute_map.update(
            TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_.attribute_map
        )

    def __init__(
        self,
        agent_interface_2=None,
        agent_interface_1=None,
        agent_2=None,
        agent_1=None,
        agent_connection_subnets_enabled_count=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """AgentConnectionFindAndCountObject - a model defined in Swagger"""  # noqa: E501
        self._agent_interface_2 = None
        self._agent_interface_1 = None
        self._agent_2 = None
        self._agent_1 = None
        self._agent_connection_subnets_enabled_count = None
        self.discriminator = None
        self.agent_interface_2 = agent_interface_2
        self.agent_interface_1 = agent_interface_1
        self.agent_2 = agent_2
        self.agent_1 = agent_1
        self.agent_connection_subnets_enabled_count = (
            agent_connection_subnets_enabled_count
        )
        TsoaPickAgentConnectionOrAgentConnectionIdOrAgentConnectionUpdatedAtOrAgentConnectionLinkTagOrAgentConnectionStatusOrAgentConnectionStatusReason_.__init__(
            self, *args, **kwargs
        )

    @property
    def agent_interface_2(self):
        """Gets the agent_interface_2 of this AgentConnectionFindAndCountObject.  # noqa: E501


        :return: The agent_interface_2 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :rtype: AgentInterfaceModelObject
        """
        return self._agent_interface_2

    @agent_interface_2.setter
    def agent_interface_2(self, agent_interface_2):
        """Sets the agent_interface_2 of this AgentConnectionFindAndCountObject.


        :param agent_interface_2: The agent_interface_2 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :type: AgentInterfaceModelObject
        """
        if agent_interface_2 is None:
            raise ValueError(
                "Invalid value for `agent_interface_2`, must not be `None`"
            )  # noqa: E501

        self._agent_interface_2 = agent_interface_2

    @property
    def agent_interface_1(self):
        """Gets the agent_interface_1 of this AgentConnectionFindAndCountObject.  # noqa: E501


        :return: The agent_interface_1 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :rtype: AgentInterfaceModelObject
        """
        return self._agent_interface_1

    @agent_interface_1.setter
    def agent_interface_1(self, agent_interface_1):
        """Sets the agent_interface_1 of this AgentConnectionFindAndCountObject.


        :param agent_interface_1: The agent_interface_1 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :type: AgentInterfaceModelObject
        """
        if agent_interface_1 is None:
            raise ValueError(
                "Invalid value for `agent_interface_1`, must not be `None`"
            )  # noqa: E501

        self._agent_interface_1 = agent_interface_1

    @property
    def agent_2(self):
        """Gets the agent_2 of this AgentConnectionFindAndCountObject.  # noqa: E501


        :return: The agent_2 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :rtype: AgentConnectionAgentObject
        """
        return self._agent_2

    @agent_2.setter
    def agent_2(self, agent_2):
        """Sets the agent_2 of this AgentConnectionFindAndCountObject.


        :param agent_2: The agent_2 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :type: AgentConnectionAgentObject
        """
        if agent_2 is None:
            raise ValueError(
                "Invalid value for `agent_2`, must not be `None`"
            )  # noqa: E501

        self._agent_2 = agent_2

    @property
    def agent_1(self):
        """Gets the agent_1 of this AgentConnectionFindAndCountObject.  # noqa: E501


        :return: The agent_1 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :rtype: AgentConnectionAgentObject
        """
        return self._agent_1

    @agent_1.setter
    def agent_1(self, agent_1):
        """Sets the agent_1 of this AgentConnectionFindAndCountObject.


        :param agent_1: The agent_1 of this AgentConnectionFindAndCountObject.  # noqa: E501
        :type: AgentConnectionAgentObject
        """
        if agent_1 is None:
            raise ValueError(
                "Invalid value for `agent_1`, must not be `None`"
            )  # noqa: E501

        self._agent_1 = agent_1

    @property
    def agent_connection_subnets_enabled_count(self):
        """Gets the agent_connection_subnets_enabled_count of this AgentConnectionFindAndCountObject.  # noqa: E501


        :return: The agent_connection_subnets_enabled_count of this AgentConnectionFindAndCountObject.  # noqa: E501
        :rtype: float
        """
        return self._agent_connection_subnets_enabled_count

    @agent_connection_subnets_enabled_count.setter
    def agent_connection_subnets_enabled_count(
        self, agent_connection_subnets_enabled_count
    ):
        """Sets the agent_connection_subnets_enabled_count of this AgentConnectionFindAndCountObject.


        :param agent_connection_subnets_enabled_count: The agent_connection_subnets_enabled_count of this AgentConnectionFindAndCountObject.  # noqa: E501
        :type: float
        """
        if agent_connection_subnets_enabled_count is None:
            raise ValueError(
                "Invalid value for `agent_connection_subnets_enabled_count`, must not be `None`"
            )  # noqa: E501

        self._agent_connection_subnets_enabled_count = (
            agent_connection_subnets_enabled_count
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AgentConnectionFindAndCountObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectionFindAndCountObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
