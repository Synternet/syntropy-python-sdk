# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TsoaPartialTranslationObject_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "lang_id": "float",
        "translation_key": "str",
        "translation_value": "str",
        "translation_type": "ContextType",
        "translation_visibility": "VisibilityType",
    }

    attribute_map = {
        "lang_id": "lang_id",
        "translation_key": "translation_key",
        "translation_value": "translation_value",
        "translation_type": "translation_type",
        "translation_visibility": "translation_visibility",
    }

    def __init__(
        self,
        lang_id=None,
        translation_key=None,
        translation_value=None,
        translation_type=None,
        translation_visibility=None,
    ):  # noqa: E501
        """TsoaPartialTranslationObject_ - a model defined in Swagger"""  # noqa: E501
        self._lang_id = None
        self._translation_key = None
        self._translation_value = None
        self._translation_type = None
        self._translation_visibility = None
        self.discriminator = None
        if lang_id is not None:
            self.lang_id = lang_id
        if translation_key is not None:
            self.translation_key = translation_key
        if translation_value is not None:
            self.translation_value = translation_value
        if translation_type is not None:
            self.translation_type = translation_type
        if translation_visibility is not None:
            self.translation_visibility = translation_visibility

    @property
    def lang_id(self):
        """Gets the lang_id of this TsoaPartialTranslationObject_.  # noqa: E501


        :return: The lang_id of this TsoaPartialTranslationObject_.  # noqa: E501
        :rtype: float
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this TsoaPartialTranslationObject_.


        :param lang_id: The lang_id of this TsoaPartialTranslationObject_.  # noqa: E501
        :type: float
        """

        self._lang_id = lang_id

    @property
    def translation_key(self):
        """Gets the translation_key of this TsoaPartialTranslationObject_.  # noqa: E501


        :return: The translation_key of this TsoaPartialTranslationObject_.  # noqa: E501
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """Sets the translation_key of this TsoaPartialTranslationObject_.


        :param translation_key: The translation_key of this TsoaPartialTranslationObject_.  # noqa: E501
        :type: str
        """

        self._translation_key = translation_key

    @property
    def translation_value(self):
        """Gets the translation_value of this TsoaPartialTranslationObject_.  # noqa: E501


        :return: The translation_value of this TsoaPartialTranslationObject_.  # noqa: E501
        :rtype: str
        """
        return self._translation_value

    @translation_value.setter
    def translation_value(self, translation_value):
        """Sets the translation_value of this TsoaPartialTranslationObject_.


        :param translation_value: The translation_value of this TsoaPartialTranslationObject_.  # noqa: E501
        :type: str
        """

        self._translation_value = translation_value

    @property
    def translation_type(self):
        """Gets the translation_type of this TsoaPartialTranslationObject_.  # noqa: E501


        :return: The translation_type of this TsoaPartialTranslationObject_.  # noqa: E501
        :rtype: ContextType
        """
        return self._translation_type

    @translation_type.setter
    def translation_type(self, translation_type):
        """Sets the translation_type of this TsoaPartialTranslationObject_.


        :param translation_type: The translation_type of this TsoaPartialTranslationObject_.  # noqa: E501
        :type: ContextType
        """

        self._translation_type = translation_type

    @property
    def translation_visibility(self):
        """Gets the translation_visibility of this TsoaPartialTranslationObject_.  # noqa: E501


        :return: The translation_visibility of this TsoaPartialTranslationObject_.  # noqa: E501
        :rtype: VisibilityType
        """
        return self._translation_visibility

    @translation_visibility.setter
    def translation_visibility(self, translation_visibility):
        """Sets the translation_visibility of this TsoaPartialTranslationObject_.


        :param translation_visibility: The translation_visibility of this TsoaPartialTranslationObject_.  # noqa: E501
        :type: VisibilityType
        """

        self._translation_visibility = translation_visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TsoaPartialTranslationObject_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TsoaPartialTranslationObject_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
