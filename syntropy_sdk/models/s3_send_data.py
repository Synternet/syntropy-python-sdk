# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class S3SendData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"location": "str", "e_tag": "str", "bucket": "str", "key": "str"}

    attribute_map = {
        "location": "Location",
        "e_tag": "ETag",
        "bucket": "Bucket",
        "key": "Key",
    }

    def __init__(self, location=None, e_tag=None, bucket=None, key=None):  # noqa: E501
        """S3SendData - a model defined in Swagger"""  # noqa: E501
        self._location = None
        self._e_tag = None
        self._bucket = None
        self._key = None
        self.discriminator = None
        self.location = location
        self.e_tag = e_tag
        self.bucket = bucket
        self.key = key

    @property
    def location(self):
        """Gets the location of this S3SendData.  # noqa: E501


        :return: The location of this S3SendData.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this S3SendData.


        :param location: The location of this S3SendData.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError(
                "Invalid value for `location`, must not be `None`"
            )  # noqa: E501

        self._location = location

    @property
    def e_tag(self):
        """Gets the e_tag of this S3SendData.  # noqa: E501


        :return: The e_tag of this S3SendData.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this S3SendData.


        :param e_tag: The e_tag of this S3SendData.  # noqa: E501
        :type: str
        """
        if e_tag is None:
            raise ValueError(
                "Invalid value for `e_tag`, must not be `None`"
            )  # noqa: E501

        self._e_tag = e_tag

    @property
    def bucket(self):
        """Gets the bucket of this S3SendData.  # noqa: E501


        :return: The bucket of this S3SendData.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this S3SendData.


        :param bucket: The bucket of this S3SendData.  # noqa: E501
        :type: str
        """
        if bucket is None:
            raise ValueError(
                "Invalid value for `bucket`, must not be `None`"
            )  # noqa: E501

        self._bucket = bucket

    @property
    def key(self):
        """Gets the key of this S3SendData.  # noqa: E501


        :return: The key of this S3SendData.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this S3SendData.


        :param key: The key of this S3SendData.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError(
                "Invalid value for `key`, must not be `None`"
            )  # noqa: E501

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(S3SendData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3SendData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
