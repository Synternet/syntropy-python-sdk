# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SrPathObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "server_id": "float",
        "route_id": "float",
        "sr_policy_id": "float",
        "interface_id": "float",
        "sr_path_local_sid": "str",
        "sr_path_local_sid_function": "BehaviorType",
        "sr_path_order": "float",
        "sr_path_status": "Status",
        "sr_path_status_reason": "str",
    }

    attribute_map = {
        "server_id": "server_id",
        "route_id": "route_id",
        "sr_policy_id": "sr_policy_id",
        "interface_id": "interface_id",
        "sr_path_local_sid": "sr_path_local_sid",
        "sr_path_local_sid_function": "sr_path_local_sid_function",
        "sr_path_order": "sr_path_order",
        "sr_path_status": "sr_path_status",
        "sr_path_status_reason": "sr_path_status_reason",
    }

    def __init__(
        self,
        server_id=None,
        route_id=None,
        sr_policy_id=None,
        interface_id=None,
        sr_path_local_sid=None,
        sr_path_local_sid_function=None,
        sr_path_order=None,
        sr_path_status=None,
        sr_path_status_reason=None,
    ):  # noqa: E501
        """SrPathObject - a model defined in Swagger"""  # noqa: E501
        self._server_id = None
        self._route_id = None
        self._sr_policy_id = None
        self._interface_id = None
        self._sr_path_local_sid = None
        self._sr_path_local_sid_function = None
        self._sr_path_order = None
        self._sr_path_status = None
        self._sr_path_status_reason = None
        self.discriminator = None
        self.server_id = server_id
        self.route_id = route_id
        self.sr_policy_id = sr_policy_id
        if interface_id is not None:
            self.interface_id = interface_id
        if sr_path_local_sid is not None:
            self.sr_path_local_sid = sr_path_local_sid
        self.sr_path_local_sid_function = sr_path_local_sid_function
        self.sr_path_order = sr_path_order
        self.sr_path_status = sr_path_status
        if sr_path_status_reason is not None:
            self.sr_path_status_reason = sr_path_status_reason

    @property
    def server_id(self):
        """Gets the server_id of this SrPathObject.  # noqa: E501


        :return: The server_id of this SrPathObject.  # noqa: E501
        :rtype: float
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this SrPathObject.


        :param server_id: The server_id of this SrPathObject.  # noqa: E501
        :type: float
        """
        if server_id is None:
            raise ValueError(
                "Invalid value for `server_id`, must not be `None`"
            )  # noqa: E501

        self._server_id = server_id

    @property
    def route_id(self):
        """Gets the route_id of this SrPathObject.  # noqa: E501


        :return: The route_id of this SrPathObject.  # noqa: E501
        :rtype: float
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this SrPathObject.


        :param route_id: The route_id of this SrPathObject.  # noqa: E501
        :type: float
        """
        if route_id is None:
            raise ValueError(
                "Invalid value for `route_id`, must not be `None`"
            )  # noqa: E501

        self._route_id = route_id

    @property
    def sr_policy_id(self):
        """Gets the sr_policy_id of this SrPathObject.  # noqa: E501


        :return: The sr_policy_id of this SrPathObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_id

    @sr_policy_id.setter
    def sr_policy_id(self, sr_policy_id):
        """Sets the sr_policy_id of this SrPathObject.


        :param sr_policy_id: The sr_policy_id of this SrPathObject.  # noqa: E501
        :type: float
        """
        if sr_policy_id is None:
            raise ValueError(
                "Invalid value for `sr_policy_id`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_id = sr_policy_id

    @property
    def interface_id(self):
        """Gets the interface_id of this SrPathObject.  # noqa: E501


        :return: The interface_id of this SrPathObject.  # noqa: E501
        :rtype: float
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this SrPathObject.


        :param interface_id: The interface_id of this SrPathObject.  # noqa: E501
        :type: float
        """

        self._interface_id = interface_id

    @property
    def sr_path_local_sid(self):
        """Gets the sr_path_local_sid of this SrPathObject.  # noqa: E501


        :return: The sr_path_local_sid of this SrPathObject.  # noqa: E501
        :rtype: str
        """
        return self._sr_path_local_sid

    @sr_path_local_sid.setter
    def sr_path_local_sid(self, sr_path_local_sid):
        """Sets the sr_path_local_sid of this SrPathObject.


        :param sr_path_local_sid: The sr_path_local_sid of this SrPathObject.  # noqa: E501
        :type: str
        """

        self._sr_path_local_sid = sr_path_local_sid

    @property
    def sr_path_local_sid_function(self):
        """Gets the sr_path_local_sid_function of this SrPathObject.  # noqa: E501


        :return: The sr_path_local_sid_function of this SrPathObject.  # noqa: E501
        :rtype: BehaviorType
        """
        return self._sr_path_local_sid_function

    @sr_path_local_sid_function.setter
    def sr_path_local_sid_function(self, sr_path_local_sid_function):
        """Sets the sr_path_local_sid_function of this SrPathObject.


        :param sr_path_local_sid_function: The sr_path_local_sid_function of this SrPathObject.  # noqa: E501
        :type: BehaviorType
        """
        if sr_path_local_sid_function is None:
            raise ValueError(
                "Invalid value for `sr_path_local_sid_function`, must not be `None`"
            )  # noqa: E501

        self._sr_path_local_sid_function = sr_path_local_sid_function

    @property
    def sr_path_order(self):
        """Gets the sr_path_order of this SrPathObject.  # noqa: E501


        :return: The sr_path_order of this SrPathObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_path_order

    @sr_path_order.setter
    def sr_path_order(self, sr_path_order):
        """Sets the sr_path_order of this SrPathObject.


        :param sr_path_order: The sr_path_order of this SrPathObject.  # noqa: E501
        :type: float
        """
        if sr_path_order is None:
            raise ValueError(
                "Invalid value for `sr_path_order`, must not be `None`"
            )  # noqa: E501

        self._sr_path_order = sr_path_order

    @property
    def sr_path_status(self):
        """Gets the sr_path_status of this SrPathObject.  # noqa: E501


        :return: The sr_path_status of this SrPathObject.  # noqa: E501
        :rtype: Status
        """
        return self._sr_path_status

    @sr_path_status.setter
    def sr_path_status(self, sr_path_status):
        """Sets the sr_path_status of this SrPathObject.


        :param sr_path_status: The sr_path_status of this SrPathObject.  # noqa: E501
        :type: Status
        """
        if sr_path_status is None:
            raise ValueError(
                "Invalid value for `sr_path_status`, must not be `None`"
            )  # noqa: E501

        self._sr_path_status = sr_path_status

    @property
    def sr_path_status_reason(self):
        """Gets the sr_path_status_reason of this SrPathObject.  # noqa: E501


        :return: The sr_path_status_reason of this SrPathObject.  # noqa: E501
        :rtype: str
        """
        return self._sr_path_status_reason

    @sr_path_status_reason.setter
    def sr_path_status_reason(self, sr_path_status_reason):
        """Sets the sr_path_status_reason of this SrPathObject.


        :param sr_path_status_reason: The sr_path_status_reason of this SrPathObject.  # noqa: E501
        :type: str
        """

        self._sr_path_status_reason = sr_path_status_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SrPathObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SrPathObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
