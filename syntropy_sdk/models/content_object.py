# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContentObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "content_title": "str",
        "content_key": "str",
        "content_body": "str",
        "lang_id": "float",
        "content_type": "ContextType",
        "content_visibility": "VisibilityType",
    }

    attribute_map = {
        "content_title": "content_title",
        "content_key": "content_key",
        "content_body": "content_body",
        "lang_id": "lang_id",
        "content_type": "content_type",
        "content_visibility": "content_visibility",
    }

    def __init__(
        self,
        content_title=None,
        content_key=None,
        content_body=None,
        lang_id=None,
        content_type=None,
        content_visibility=None,
    ):  # noqa: E501
        """ContentObject - a model defined in Swagger"""  # noqa: E501
        self._content_title = None
        self._content_key = None
        self._content_body = None
        self._lang_id = None
        self._content_type = None
        self._content_visibility = None
        self.discriminator = None
        if content_title is not None:
            self.content_title = content_title
        self.content_key = content_key
        self.content_body = content_body
        self.lang_id = lang_id
        self.content_type = content_type
        self.content_visibility = content_visibility

    @property
    def content_title(self):
        """Gets the content_title of this ContentObject.  # noqa: E501


        :return: The content_title of this ContentObject.  # noqa: E501
        :rtype: str
        """
        return self._content_title

    @content_title.setter
    def content_title(self, content_title):
        """Sets the content_title of this ContentObject.


        :param content_title: The content_title of this ContentObject.  # noqa: E501
        :type: str
        """

        self._content_title = content_title

    @property
    def content_key(self):
        """Gets the content_key of this ContentObject.  # noqa: E501


        :return: The content_key of this ContentObject.  # noqa: E501
        :rtype: str
        """
        return self._content_key

    @content_key.setter
    def content_key(self, content_key):
        """Sets the content_key of this ContentObject.


        :param content_key: The content_key of this ContentObject.  # noqa: E501
        :type: str
        """
        if content_key is None:
            raise ValueError(
                "Invalid value for `content_key`, must not be `None`"
            )  # noqa: E501

        self._content_key = content_key

    @property
    def content_body(self):
        """Gets the content_body of this ContentObject.  # noqa: E501


        :return: The content_body of this ContentObject.  # noqa: E501
        :rtype: str
        """
        return self._content_body

    @content_body.setter
    def content_body(self, content_body):
        """Sets the content_body of this ContentObject.


        :param content_body: The content_body of this ContentObject.  # noqa: E501
        :type: str
        """
        if content_body is None:
            raise ValueError(
                "Invalid value for `content_body`, must not be `None`"
            )  # noqa: E501

        self._content_body = content_body

    @property
    def lang_id(self):
        """Gets the lang_id of this ContentObject.  # noqa: E501


        :return: The lang_id of this ContentObject.  # noqa: E501
        :rtype: float
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ContentObject.


        :param lang_id: The lang_id of this ContentObject.  # noqa: E501
        :type: float
        """
        if lang_id is None:
            raise ValueError(
                "Invalid value for `lang_id`, must not be `None`"
            )  # noqa: E501

        self._lang_id = lang_id

    @property
    def content_type(self):
        """Gets the content_type of this ContentObject.  # noqa: E501


        :return: The content_type of this ContentObject.  # noqa: E501
        :rtype: ContextType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentObject.


        :param content_type: The content_type of this ContentObject.  # noqa: E501
        :type: ContextType
        """
        if content_type is None:
            raise ValueError(
                "Invalid value for `content_type`, must not be `None`"
            )  # noqa: E501

        self._content_type = content_type

    @property
    def content_visibility(self):
        """Gets the content_visibility of this ContentObject.  # noqa: E501


        :return: The content_visibility of this ContentObject.  # noqa: E501
        :rtype: VisibilityType
        """
        return self._content_visibility

    @content_visibility.setter
    def content_visibility(self, content_visibility):
        """Sets the content_visibility of this ContentObject.


        :param content_visibility: The content_visibility of this ContentObject.  # noqa: E501
        :type: VisibilityType
        """
        if content_visibility is None:
            raise ValueError(
                "Invalid value for `content_visibility`, must not be `None`"
            )  # noqa: E501

        self._content_visibility = content_visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ContentObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
