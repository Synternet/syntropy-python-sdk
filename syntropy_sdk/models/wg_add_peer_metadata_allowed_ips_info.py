# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WgAddPeerMetadataAllowedIpsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "agent_service_subnet_ip": "str",
        "agent_service_udp_ports": "list[float]",
        "agent_service_tcp_ports": "list[float]",
        "agent_service_name": "str",
    }

    attribute_map = {
        "agent_service_subnet_ip": "agent_service_subnet_ip",
        "agent_service_udp_ports": "agent_service_udp_ports",
        "agent_service_tcp_ports": "agent_service_tcp_ports",
        "agent_service_name": "agent_service_name",
    }

    def __init__(
        self,
        agent_service_subnet_ip=None,
        agent_service_udp_ports=None,
        agent_service_tcp_ports=None,
        agent_service_name=None,
    ):  # noqa: E501
        """WgAddPeerMetadataAllowedIpsInfo - a model defined in Swagger"""  # noqa: E501
        self._agent_service_subnet_ip = None
        self._agent_service_udp_ports = None
        self._agent_service_tcp_ports = None
        self._agent_service_name = None
        self.discriminator = None
        self.agent_service_subnet_ip = agent_service_subnet_ip
        self.agent_service_udp_ports = agent_service_udp_ports
        self.agent_service_tcp_ports = agent_service_tcp_ports
        self.agent_service_name = agent_service_name

    @property
    def agent_service_subnet_ip(self):
        """Gets the agent_service_subnet_ip of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501


        :return: The agent_service_subnet_ip of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :rtype: str
        """
        return self._agent_service_subnet_ip

    @agent_service_subnet_ip.setter
    def agent_service_subnet_ip(self, agent_service_subnet_ip):
        """Sets the agent_service_subnet_ip of this WgAddPeerMetadataAllowedIpsInfo.


        :param agent_service_subnet_ip: The agent_service_subnet_ip of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :type: str
        """
        if agent_service_subnet_ip is None:
            raise ValueError(
                "Invalid value for `agent_service_subnet_ip`, must not be `None`"
            )  # noqa: E501

        self._agent_service_subnet_ip = agent_service_subnet_ip

    @property
    def agent_service_udp_ports(self):
        """Gets the agent_service_udp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501


        :return: The agent_service_udp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._agent_service_udp_ports

    @agent_service_udp_ports.setter
    def agent_service_udp_ports(self, agent_service_udp_ports):
        """Sets the agent_service_udp_ports of this WgAddPeerMetadataAllowedIpsInfo.


        :param agent_service_udp_ports: The agent_service_udp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :type: list[float]
        """
        if agent_service_udp_ports is None:
            raise ValueError(
                "Invalid value for `agent_service_udp_ports`, must not be `None`"
            )  # noqa: E501

        self._agent_service_udp_ports = agent_service_udp_ports

    @property
    def agent_service_tcp_ports(self):
        """Gets the agent_service_tcp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501


        :return: The agent_service_tcp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._agent_service_tcp_ports

    @agent_service_tcp_ports.setter
    def agent_service_tcp_ports(self, agent_service_tcp_ports):
        """Sets the agent_service_tcp_ports of this WgAddPeerMetadataAllowedIpsInfo.


        :param agent_service_tcp_ports: The agent_service_tcp_ports of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :type: list[float]
        """
        if agent_service_tcp_ports is None:
            raise ValueError(
                "Invalid value for `agent_service_tcp_ports`, must not be `None`"
            )  # noqa: E501

        self._agent_service_tcp_ports = agent_service_tcp_ports

    @property
    def agent_service_name(self):
        """Gets the agent_service_name of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501


        :return: The agent_service_name of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :rtype: str
        """
        return self._agent_service_name

    @agent_service_name.setter
    def agent_service_name(self, agent_service_name):
        """Sets the agent_service_name of this WgAddPeerMetadataAllowedIpsInfo.


        :param agent_service_name: The agent_service_name of this WgAddPeerMetadataAllowedIpsInfo.  # noqa: E501
        :type: str
        """
        if agent_service_name is None:
            raise ValueError(
                "Invalid value for `agent_service_name`, must not be `None`"
            )  # noqa: E501

        self._agent_service_name = agent_service_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WgAddPeerMetadataAllowedIpsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WgAddPeerMetadataAllowedIpsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
