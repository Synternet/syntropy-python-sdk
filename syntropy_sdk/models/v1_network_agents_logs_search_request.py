# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V1NetworkAgentsLogsSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "message": "str",
        "agent_id": "list[int]",
        "severity": "list[V1AgentLogSeverity]",
        "range_from": "datetime",
        "range_to": "datetime",
        "sort": "V1AgentLogSort",
        "_from": "int",
        "size": "int",
    }

    attribute_map = {
        "message": "message",
        "agent_id": "agent_id",
        "severity": "severity",
        "range_from": "range_from",
        "range_to": "range_to",
        "sort": "sort",
        "_from": "from",
        "size": "size",
    }

    def __init__(
        self,
        message=None,
        agent_id=None,
        severity=None,
        range_from=None,
        range_to=None,
        sort=None,
        _from=None,
        size=None,
    ):  # noqa: E501
        """V1NetworkAgentsLogsSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._agent_id = None
        self._severity = None
        self._range_from = None
        self._range_to = None
        self._sort = None
        self.__from = None
        self._size = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if agent_id is not None:
            self.agent_id = agent_id
        if severity is not None:
            self.severity = severity
        self.range_from = range_from
        self.range_to = range_to
        self.sort = sort
        if _from is not None:
            self._from = _from
        if size is not None:
            self.size = size

    @property
    def message(self):
        """Gets the message of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The message of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V1NetworkAgentsLogsSearchRequest.


        :param message: The message of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def agent_id(self):
        """Gets the agent_id of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The agent_id of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this V1NetworkAgentsLogsSearchRequest.


        :param agent_id: The agent_id of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: list[int]
        """

        self._agent_id = agent_id

    @property
    def severity(self):
        """Gets the severity of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The severity of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: list[V1AgentLogSeverity]
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this V1NetworkAgentsLogsSearchRequest.


        :param severity: The severity of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: list[V1AgentLogSeverity]
        """

        self._severity = severity

    @property
    def range_from(self):
        """Gets the range_from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The range_from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._range_from

    @range_from.setter
    def range_from(self, range_from):
        """Sets the range_from of this V1NetworkAgentsLogsSearchRequest.


        :param range_from: The range_from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: datetime
        """
        if range_from is None:
            raise ValueError(
                "Invalid value for `range_from`, must not be `None`"
            )  # noqa: E501

        self._range_from = range_from

    @property
    def range_to(self):
        """Gets the range_to of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The range_to of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._range_to

    @range_to.setter
    def range_to(self, range_to):
        """Sets the range_to of this V1NetworkAgentsLogsSearchRequest.


        :param range_to: The range_to of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: datetime
        """
        if range_to is None:
            raise ValueError(
                "Invalid value for `range_to`, must not be `None`"
            )  # noqa: E501

        self._range_to = range_to

    @property
    def sort(self):
        """Gets the sort of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501


        :return: The sort of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: V1AgentLogSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this V1NetworkAgentsLogsSearchRequest.


        :param sort: The sort of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: V1AgentLogSort
        """
        if sort is None:
            raise ValueError(
                "Invalid value for `sort`, must not be `None`"
            )  # noqa: E501

        self._sort = sort

    @property
    def _from(self):
        """Gets the _from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501

        Default: 0  # noqa: E501

        :return: The _from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this V1NetworkAgentsLogsSearchRequest.

        Default: 0  # noqa: E501

        :param _from: The _from of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def size(self):
        """Gets the size of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501

        Default: 50  # noqa: E501

        :return: The size of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this V1NetworkAgentsLogsSearchRequest.

        Default: 50  # noqa: E501

        :param size: The size of this V1NetworkAgentsLogsSearchRequest.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1NetworkAgentsLogsSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NetworkAgentsLogsSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
