# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from syntropy_sdk.models.tsoa_pick_agent_or_agent_id_or_agent_public_ipv4_or_agent_location_city_or_agent_locked_fields_or_agent_name_or_agent_type_or_agent_version_or_agent_modified_at_or_agent_status_or_agent_is_online_or_agent_is_virtual_ import (  # noqa: F401,E501
    TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_,
)


class AgentFoundAndCountObject(
    TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_
):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "agent_provider": "AgentProviderObject",
        "agent_tags": "list[TsoaPickAgentTagAgentTagNameOrAgentTagId_]",
        "agent_services_subnets_enabled_count": "float",
        "agent_services_subnets_count": "float",
        "agent_location_country": "str",
    }
    if hasattr(
        TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_,
        "swagger_types",
    ):
        swagger_types.update(
            TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_.swagger_types
        )

    attribute_map = {
        "agent_provider": "agent_provider",
        "agent_tags": "agent_tags",
        "agent_services_subnets_enabled_count": "agent_services_subnets_enabled_count",
        "agent_services_subnets_count": "agent_services_subnets_count",
        "agent_location_country": "agent_location_country",
    }
    if hasattr(
        TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_,
        "attribute_map",
    ):
        attribute_map.update(
            TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_.attribute_map
        )

    def __init__(
        self,
        agent_provider=None,
        agent_tags=None,
        agent_services_subnets_enabled_count=None,
        agent_services_subnets_count=None,
        agent_location_country=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """AgentFoundAndCountObject - a model defined in Swagger"""  # noqa: E501
        self._agent_provider = None
        self._agent_tags = None
        self._agent_services_subnets_enabled_count = None
        self._agent_services_subnets_count = None
        self._agent_location_country = None
        self.discriminator = None
        self.agent_provider = agent_provider
        self.agent_tags = agent_tags
        self.agent_services_subnets_enabled_count = agent_services_subnets_enabled_count
        self.agent_services_subnets_count = agent_services_subnets_count
        self.agent_location_country = agent_location_country
        TsoaPickAgentOrAgentIdOrAgentPublicIpv4OrAgentLocationCityOrAgentLockedFieldsOrAgentNameOrAgentTypeOrAgentVersionOrAgentModifiedAtOrAgentStatusOrAgentIsOnlineOrAgentIsVirtual_.__init__(
            self, *args, **kwargs
        )

    @property
    def agent_provider(self):
        """Gets the agent_provider of this AgentFoundAndCountObject.  # noqa: E501


        :return: The agent_provider of this AgentFoundAndCountObject.  # noqa: E501
        :rtype: Object
        """
        return self._agent_provider

    @agent_provider.setter
    def agent_provider(self, agent_provider):
        """Sets the agent_provider of this AgentFoundAndCountObject.


        :param agent_provider: The agent_provider of this AgentFoundAndCountObject.  # noqa: E501
        :type: Object
        """
        if agent_provider is None:
            raise ValueError(
                "Invalid value for `agent_provider`, must not be `None`"
            )  # noqa: E501

        self._agent_provider = agent_provider

    @property
    def agent_tags(self):
        """Gets the agent_tags of this AgentFoundAndCountObject.  # noqa: E501


        :return: The agent_tags of this AgentFoundAndCountObject.  # noqa: E501
        :rtype: list[TsoaPickAgentTagAgentTagNameOrAgentTagId_]
        """
        return self._agent_tags

    @agent_tags.setter
    def agent_tags(self, agent_tags):
        """Sets the agent_tags of this AgentFoundAndCountObject.


        :param agent_tags: The agent_tags of this AgentFoundAndCountObject.  # noqa: E501
        :type: list[TsoaPickAgentTagAgentTagNameOrAgentTagId_]
        """
        if agent_tags is None:
            raise ValueError(
                "Invalid value for `agent_tags`, must not be `None`"
            )  # noqa: E501

        self._agent_tags = agent_tags

    @property
    def agent_services_subnets_enabled_count(self):
        """Gets the agent_services_subnets_enabled_count of this AgentFoundAndCountObject.  # noqa: E501


        :return: The agent_services_subnets_enabled_count of this AgentFoundAndCountObject.  # noqa: E501
        :rtype: float
        """
        return self._agent_services_subnets_enabled_count

    @agent_services_subnets_enabled_count.setter
    def agent_services_subnets_enabled_count(
        self, agent_services_subnets_enabled_count
    ):
        """Sets the agent_services_subnets_enabled_count of this AgentFoundAndCountObject.


        :param agent_services_subnets_enabled_count: The agent_services_subnets_enabled_count of this AgentFoundAndCountObject.  # noqa: E501
        :type: float
        """
        if agent_services_subnets_enabled_count is None:
            raise ValueError(
                "Invalid value for `agent_services_subnets_enabled_count`, must not be `None`"
            )  # noqa: E501

        self._agent_services_subnets_enabled_count = (
            agent_services_subnets_enabled_count
        )

    @property
    def agent_services_subnets_count(self):
        """Gets the agent_services_subnets_count of this AgentFoundAndCountObject.  # noqa: E501


        :return: The agent_services_subnets_count of this AgentFoundAndCountObject.  # noqa: E501
        :rtype: float
        """
        return self._agent_services_subnets_count

    @agent_services_subnets_count.setter
    def agent_services_subnets_count(self, agent_services_subnets_count):
        """Sets the agent_services_subnets_count of this AgentFoundAndCountObject.


        :param agent_services_subnets_count: The agent_services_subnets_count of this AgentFoundAndCountObject.  # noqa: E501
        :type: float
        """
        if agent_services_subnets_count is None:
            raise ValueError(
                "Invalid value for `agent_services_subnets_count`, must not be `None`"
            )  # noqa: E501

        self._agent_services_subnets_count = agent_services_subnets_count

    @property
    def agent_location_country(self):
        """Gets the agent_location_country of this AgentFoundAndCountObject.  # noqa: E501


        :return: The agent_location_country of this AgentFoundAndCountObject.  # noqa: E501
        :rtype: str
        """
        return self._agent_location_country

    @agent_location_country.setter
    def agent_location_country(self, agent_location_country):
        """Sets the agent_location_country of this AgentFoundAndCountObject.


        :param agent_location_country: The agent_location_country of this AgentFoundAndCountObject.  # noqa: E501
        :type: str
        """
        if agent_location_country is None:
            raise ValueError(
                "Invalid value for `agent_location_country`, must not be `None`"
            )  # noqa: E501

        self._agent_location_country = agent_location_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AgentFoundAndCountObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentFoundAndCountObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
