# coding: utf-8

"""
    syntropy-auth-service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContactRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "company": "str",
        "domain": "str",
        "marketing_email_agreed": "bool",
    }

    attribute_map = {
        "name": "name",
        "company": "company",
        "domain": "domain",
        "marketing_email_agreed": "marketing_email_agreed",
    }

    def __init__(
        self, name=None, company=None, domain=None, marketing_email_agreed=None
    ):  # noqa: E501
        """ContactRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._company = None
        self._domain = None
        self._marketing_email_agreed = None
        self.discriminator = None
        self.name = name
        if company is not None:
            self.company = company
        self.domain = domain
        self.marketing_email_agreed = marketing_email_agreed

    @property
    def name(self):
        """Gets the name of this ContactRequest.  # noqa: E501


        :return: The name of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactRequest.


        :param name: The name of this ContactRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def company(self):
        """Gets the company of this ContactRequest.  # noqa: E501


        :return: The company of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ContactRequest.


        :param company: The company of this ContactRequest.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def domain(self):
        """Gets the domain of this ContactRequest.  # noqa: E501


        :return: The domain of this ContactRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ContactRequest.


        :param domain: The domain of this ContactRequest.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError(
                "Invalid value for `domain`, must not be `None`"
            )  # noqa: E501

        self._domain = domain

    @property
    def marketing_email_agreed(self):
        """Gets the marketing_email_agreed of this ContactRequest.  # noqa: E501


        :return: The marketing_email_agreed of this ContactRequest.  # noqa: E501
        :rtype: bool
        """
        return self._marketing_email_agreed

    @marketing_email_agreed.setter
    def marketing_email_agreed(self, marketing_email_agreed):
        """Sets the marketing_email_agreed of this ContactRequest.


        :param marketing_email_agreed: The marketing_email_agreed of this ContactRequest.  # noqa: E501
        :type: bool
        """
        if marketing_email_agreed is None:
            raise ValueError(
                "Invalid value for `marketing_email_agreed`, must not be `None`"
            )  # noqa: E501

        self._marketing_email_agreed = marketing_email_agreed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ContactRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
