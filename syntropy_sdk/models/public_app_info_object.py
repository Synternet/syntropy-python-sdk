# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PublicAppInfoObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "providers": "Object",
        "versions": "PublicVersionsObject",
        "primary_host_dest_ipv4_cidr": "str",
        "agent_api_address": "str",
    }

    attribute_map = {
        "providers": "providers",
        "versions": "versions",
        "primary_host_dest_ipv4_cidr": "primary_host_dest_ipv4_cidr",
        "agent_api_address": "agent_api_address",
    }

    def __init__(
        self,
        providers=None,
        versions=None,
        primary_host_dest_ipv4_cidr=None,
        agent_api_address=None,
    ):  # noqa: E501
        """PublicAppInfoObject - a model defined in Swagger"""  # noqa: E501
        self._providers = None
        self._versions = None
        self._primary_host_dest_ipv4_cidr = None
        self._agent_api_address = None
        self.discriminator = None
        self.providers = providers
        self.versions = versions
        if primary_host_dest_ipv4_cidr is not None:
            self.primary_host_dest_ipv4_cidr = primary_host_dest_ipv4_cidr
        self.agent_api_address = agent_api_address

    @property
    def providers(self):
        """Gets the providers of this PublicAppInfoObject.  # noqa: E501


        :return: The providers of this PublicAppInfoObject.  # noqa: E501
        :rtype: Object
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this PublicAppInfoObject.


        :param providers: The providers of this PublicAppInfoObject.  # noqa: E501
        :type: Object
        """
        if providers is None:
            raise ValueError(
                "Invalid value for `providers`, must not be `None`"
            )  # noqa: E501

        self._providers = providers

    @property
    def versions(self):
        """Gets the versions of this PublicAppInfoObject.  # noqa: E501


        :return: The versions of this PublicAppInfoObject.  # noqa: E501
        :rtype: PublicVersionsObject
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this PublicAppInfoObject.


        :param versions: The versions of this PublicAppInfoObject.  # noqa: E501
        :type: PublicVersionsObject
        """
        if versions is None:
            raise ValueError(
                "Invalid value for `versions`, must not be `None`"
            )  # noqa: E501

        self._versions = versions

    @property
    def primary_host_dest_ipv4_cidr(self):
        """Gets the primary_host_dest_ipv4_cidr of this PublicAppInfoObject.  # noqa: E501


        :return: The primary_host_dest_ipv4_cidr of this PublicAppInfoObject.  # noqa: E501
        :rtype: str
        """
        return self._primary_host_dest_ipv4_cidr

    @primary_host_dest_ipv4_cidr.setter
    def primary_host_dest_ipv4_cidr(self, primary_host_dest_ipv4_cidr):
        """Sets the primary_host_dest_ipv4_cidr of this PublicAppInfoObject.


        :param primary_host_dest_ipv4_cidr: The primary_host_dest_ipv4_cidr of this PublicAppInfoObject.  # noqa: E501
        :type: str
        """

        self._primary_host_dest_ipv4_cidr = primary_host_dest_ipv4_cidr

    @property
    def agent_api_address(self):
        """Gets the agent_api_address of this PublicAppInfoObject.  # noqa: E501


        :return: The agent_api_address of this PublicAppInfoObject.  # noqa: E501
        :rtype: str
        """
        return self._agent_api_address

    @agent_api_address.setter
    def agent_api_address(self, agent_api_address):
        """Sets the agent_api_address of this PublicAppInfoObject.


        :param agent_api_address: The agent_api_address of this PublicAppInfoObject.  # noqa: E501
        :type: str
        """
        if agent_api_address is None:
            raise ValueError(
                "Invalid value for `agent_api_address`, must not be `None`"
            )  # noqa: E501

        self._agent_api_address = agent_api_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PublicAppInfoObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicAppInfoObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
