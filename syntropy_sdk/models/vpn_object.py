# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VpnObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "ingress_server_id": "float",
        "vpn_internal_ipv4": "str",
        "vpn_public_key": "str",
        "vpn_endpoint_ip": "str",
        "vpn_gateway_ipv4": "str",
        "vpn_interface_ip": "str",
    }

    attribute_map = {
        "ingress_server_id": "ingress_server_id",
        "vpn_internal_ipv4": "vpn_internal_ipv4",
        "vpn_public_key": "vpn_public_key",
        "vpn_endpoint_ip": "vpn_endpoint_ip",
        "vpn_gateway_ipv4": "vpn_gateway_ipv4",
        "vpn_interface_ip": "vpn_interface_ip",
    }

    def __init__(
        self,
        ingress_server_id=None,
        vpn_internal_ipv4=None,
        vpn_public_key=None,
        vpn_endpoint_ip=None,
        vpn_gateway_ipv4=None,
        vpn_interface_ip=None,
    ):  # noqa: E501
        """VpnObject - a model defined in Swagger"""  # noqa: E501
        self._ingress_server_id = None
        self._vpn_internal_ipv4 = None
        self._vpn_public_key = None
        self._vpn_endpoint_ip = None
        self._vpn_gateway_ipv4 = None
        self._vpn_interface_ip = None
        self.discriminator = None
        self.ingress_server_id = ingress_server_id
        self.vpn_internal_ipv4 = vpn_internal_ipv4
        if vpn_public_key is not None:
            self.vpn_public_key = vpn_public_key
        self.vpn_endpoint_ip = vpn_endpoint_ip
        if vpn_gateway_ipv4 is not None:
            self.vpn_gateway_ipv4 = vpn_gateway_ipv4
        self.vpn_interface_ip = vpn_interface_ip

    @property
    def ingress_server_id(self):
        """Gets the ingress_server_id of this VpnObject.  # noqa: E501


        :return: The ingress_server_id of this VpnObject.  # noqa: E501
        :rtype: float
        """
        return self._ingress_server_id

    @ingress_server_id.setter
    def ingress_server_id(self, ingress_server_id):
        """Sets the ingress_server_id of this VpnObject.


        :param ingress_server_id: The ingress_server_id of this VpnObject.  # noqa: E501
        :type: float
        """
        if ingress_server_id is None:
            raise ValueError(
                "Invalid value for `ingress_server_id`, must not be `None`"
            )  # noqa: E501

        self._ingress_server_id = ingress_server_id

    @property
    def vpn_internal_ipv4(self):
        """Gets the vpn_internal_ipv4 of this VpnObject.  # noqa: E501


        :return: The vpn_internal_ipv4 of this VpnObject.  # noqa: E501
        :rtype: str
        """
        return self._vpn_internal_ipv4

    @vpn_internal_ipv4.setter
    def vpn_internal_ipv4(self, vpn_internal_ipv4):
        """Sets the vpn_internal_ipv4 of this VpnObject.


        :param vpn_internal_ipv4: The vpn_internal_ipv4 of this VpnObject.  # noqa: E501
        :type: str
        """
        if vpn_internal_ipv4 is None:
            raise ValueError(
                "Invalid value for `vpn_internal_ipv4`, must not be `None`"
            )  # noqa: E501

        self._vpn_internal_ipv4 = vpn_internal_ipv4

    @property
    def vpn_public_key(self):
        """Gets the vpn_public_key of this VpnObject.  # noqa: E501


        :return: The vpn_public_key of this VpnObject.  # noqa: E501
        :rtype: str
        """
        return self._vpn_public_key

    @vpn_public_key.setter
    def vpn_public_key(self, vpn_public_key):
        """Sets the vpn_public_key of this VpnObject.


        :param vpn_public_key: The vpn_public_key of this VpnObject.  # noqa: E501
        :type: str
        """

        self._vpn_public_key = vpn_public_key

    @property
    def vpn_endpoint_ip(self):
        """Gets the vpn_endpoint_ip of this VpnObject.  # noqa: E501


        :return: The vpn_endpoint_ip of this VpnObject.  # noqa: E501
        :rtype: str
        """
        return self._vpn_endpoint_ip

    @vpn_endpoint_ip.setter
    def vpn_endpoint_ip(self, vpn_endpoint_ip):
        """Sets the vpn_endpoint_ip of this VpnObject.


        :param vpn_endpoint_ip: The vpn_endpoint_ip of this VpnObject.  # noqa: E501
        :type: str
        """
        if vpn_endpoint_ip is None:
            raise ValueError(
                "Invalid value for `vpn_endpoint_ip`, must not be `None`"
            )  # noqa: E501

        self._vpn_endpoint_ip = vpn_endpoint_ip

    @property
    def vpn_gateway_ipv4(self):
        """Gets the vpn_gateway_ipv4 of this VpnObject.  # noqa: E501


        :return: The vpn_gateway_ipv4 of this VpnObject.  # noqa: E501
        :rtype: str
        """
        return self._vpn_gateway_ipv4

    @vpn_gateway_ipv4.setter
    def vpn_gateway_ipv4(self, vpn_gateway_ipv4):
        """Sets the vpn_gateway_ipv4 of this VpnObject.


        :param vpn_gateway_ipv4: The vpn_gateway_ipv4 of this VpnObject.  # noqa: E501
        :type: str
        """

        self._vpn_gateway_ipv4 = vpn_gateway_ipv4

    @property
    def vpn_interface_ip(self):
        """Gets the vpn_interface_ip of this VpnObject.  # noqa: E501


        :return: The vpn_interface_ip of this VpnObject.  # noqa: E501
        :rtype: str
        """
        return self._vpn_interface_ip

    @vpn_interface_ip.setter
    def vpn_interface_ip(self, vpn_interface_ip):
        """Sets the vpn_interface_ip of this VpnObject.


        :param vpn_interface_ip: The vpn_interface_ip of this VpnObject.  # noqa: E501
        :type: str
        """
        if vpn_interface_ip is None:
            raise ValueError(
                "Invalid value for `vpn_interface_ip`, must not be `None`"
            )  # noqa: E501

        self._vpn_interface_ip = vpn_interface_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(VpnObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpnObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
