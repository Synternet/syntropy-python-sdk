# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VppCallableObjectArgs16(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "end_ifname": "str",
        "end_addr": "str",
        "behavior": "BehaviorType",
        "addr": "str",
    }

    attribute_map = {
        "end_ifname": "end_ifname",
        "end_addr": "end_addr",
        "behavior": "behavior",
        "addr": "addr",
    }

    def __init__(
        self, end_ifname=None, end_addr=None, behavior=None, addr=None
    ):  # noqa: E501
        """VppCallableObjectArgs16 - a model defined in Swagger"""  # noqa: E501
        self._end_ifname = None
        self._end_addr = None
        self._behavior = None
        self._addr = None
        self.discriminator = None
        if end_ifname is not None:
            self.end_ifname = end_ifname
        if end_addr is not None:
            self.end_addr = end_addr
        self.behavior = behavior
        self.addr = addr

    @property
    def end_ifname(self):
        """Gets the end_ifname of this VppCallableObjectArgs16.  # noqa: E501


        :return: The end_ifname of this VppCallableObjectArgs16.  # noqa: E501
        :rtype: str
        """
        return self._end_ifname

    @end_ifname.setter
    def end_ifname(self, end_ifname):
        """Sets the end_ifname of this VppCallableObjectArgs16.


        :param end_ifname: The end_ifname of this VppCallableObjectArgs16.  # noqa: E501
        :type: str
        """

        self._end_ifname = end_ifname

    @property
    def end_addr(self):
        """Gets the end_addr of this VppCallableObjectArgs16.  # noqa: E501


        :return: The end_addr of this VppCallableObjectArgs16.  # noqa: E501
        :rtype: str
        """
        return self._end_addr

    @end_addr.setter
    def end_addr(self, end_addr):
        """Sets the end_addr of this VppCallableObjectArgs16.


        :param end_addr: The end_addr of this VppCallableObjectArgs16.  # noqa: E501
        :type: str
        """

        self._end_addr = end_addr

    @property
    def behavior(self):
        """Gets the behavior of this VppCallableObjectArgs16.  # noqa: E501


        :return: The behavior of this VppCallableObjectArgs16.  # noqa: E501
        :rtype: BehaviorType
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this VppCallableObjectArgs16.


        :param behavior: The behavior of this VppCallableObjectArgs16.  # noqa: E501
        :type: BehaviorType
        """
        if behavior is None:
            raise ValueError(
                "Invalid value for `behavior`, must not be `None`"
            )  # noqa: E501

        self._behavior = behavior

    @property
    def addr(self):
        """Gets the addr of this VppCallableObjectArgs16.  # noqa: E501


        :return: The addr of this VppCallableObjectArgs16.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this VppCallableObjectArgs16.


        :param addr: The addr of this VppCallableObjectArgs16.  # noqa: E501
        :type: str
        """
        if addr is None:
            raise ValueError(
                "Invalid value for `addr`, must not be `None`"
            )  # noqa: E501

        self._addr = addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(VppCallableObjectArgs16, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VppCallableObjectArgs16):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
