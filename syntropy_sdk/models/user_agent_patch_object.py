# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserAgentPatchObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "agent_name": "DefaultString",
        "agent_provider_name": "DefaultString",
        "agent_tags": "list[str]",
        "agent_location_lat": "AllOfUserAgentPatchObjectAgentLocationLat",
        "agent_location_lon": "AllOfUserAgentPatchObjectAgentLocationLon",
        "agent_location_city": "AllOfUserAgentPatchObjectAgentLocationCity",
        "agent_location_country": "AllOfUserAgentPatchObjectAgentLocationCountry",
        "network": "AgentInterfacesMetadata",
        "agent_provider_id": "AllOfUserAgentPatchObjectAgentProviderId",
    }

    attribute_map = {
        "agent_name": "agent_name",
        "agent_provider_name": "agent_provider_name",
        "agent_tags": "agent_tags",
        "agent_location_lat": "agent_location_lat",
        "agent_location_lon": "agent_location_lon",
        "agent_location_city": "agent_location_city",
        "agent_location_country": "agent_location_country",
        "network": "network",
        "agent_provider_id": "agent_provider_id",
    }

    def __init__(
        self,
        agent_name=None,
        agent_provider_name=None,
        agent_tags=None,
        agent_location_lat=None,
        agent_location_lon=None,
        agent_location_city=None,
        agent_location_country=None,
        network=None,
        agent_provider_id=None,
    ):  # noqa: E501
        """UserAgentPatchObject - a model defined in Swagger"""  # noqa: E501
        self._agent_name = None
        self._agent_provider_name = None
        self._agent_tags = None
        self._agent_location_lat = None
        self._agent_location_lon = None
        self._agent_location_city = None
        self._agent_location_country = None
        self._network = None
        self._agent_provider_id = None
        self.discriminator = None
        if agent_name is not None:
            self.agent_name = agent_name
        if agent_provider_name is not None:
            self.agent_provider_name = agent_provider_name
        if agent_tags is not None:
            self.agent_tags = agent_tags
        if agent_location_lat is not None:
            self.agent_location_lat = agent_location_lat
        if agent_location_lon is not None:
            self.agent_location_lon = agent_location_lon
        if agent_location_city is not None:
            self.agent_location_city = agent_location_city
        if agent_location_country is not None:
            self.agent_location_country = agent_location_country
        if network is not None:
            self.network = network
        if agent_provider_id is not None:
            self.agent_provider_id = agent_provider_id

    @property
    def agent_name(self):
        """Gets the agent_name of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_name of this UserAgentPatchObject.  # noqa: E501
        :rtype: DefaultString
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this UserAgentPatchObject.


        :param agent_name: The agent_name of this UserAgentPatchObject.  # noqa: E501
        :type: DefaultString
        """

        self._agent_name = agent_name

    @property
    def agent_provider_name(self):
        """Gets the agent_provider_name of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_provider_name of this UserAgentPatchObject.  # noqa: E501
        :rtype: DefaultString
        """
        return self._agent_provider_name

    @agent_provider_name.setter
    def agent_provider_name(self, agent_provider_name):
        """Sets the agent_provider_name of this UserAgentPatchObject.


        :param agent_provider_name: The agent_provider_name of this UserAgentPatchObject.  # noqa: E501
        :type: DefaultString
        """

        self._agent_provider_name = agent_provider_name

    @property
    def agent_tags(self):
        """Gets the agent_tags of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_tags of this UserAgentPatchObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_tags

    @agent_tags.setter
    def agent_tags(self, agent_tags):
        """Sets the agent_tags of this UserAgentPatchObject.


        :param agent_tags: The agent_tags of this UserAgentPatchObject.  # noqa: E501
        :type: list[str]
        """

        self._agent_tags = agent_tags

    @property
    def agent_location_lat(self):
        """Gets the agent_location_lat of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_location_lat of this UserAgentPatchObject.  # noqa: E501
        :rtype: AllOfUserAgentPatchObjectAgentLocationLat
        """
        return self._agent_location_lat

    @agent_location_lat.setter
    def agent_location_lat(self, agent_location_lat):
        """Sets the agent_location_lat of this UserAgentPatchObject.


        :param agent_location_lat: The agent_location_lat of this UserAgentPatchObject.  # noqa: E501
        :type: AllOfUserAgentPatchObjectAgentLocationLat
        """

        self._agent_location_lat = agent_location_lat

    @property
    def agent_location_lon(self):
        """Gets the agent_location_lon of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_location_lon of this UserAgentPatchObject.  # noqa: E501
        :rtype: AllOfUserAgentPatchObjectAgentLocationLon
        """
        return self._agent_location_lon

    @agent_location_lon.setter
    def agent_location_lon(self, agent_location_lon):
        """Sets the agent_location_lon of this UserAgentPatchObject.


        :param agent_location_lon: The agent_location_lon of this UserAgentPatchObject.  # noqa: E501
        :type: AllOfUserAgentPatchObjectAgentLocationLon
        """

        self._agent_location_lon = agent_location_lon

    @property
    def agent_location_city(self):
        """Gets the agent_location_city of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_location_city of this UserAgentPatchObject.  # noqa: E501
        :rtype: AllOfUserAgentPatchObjectAgentLocationCity
        """
        return self._agent_location_city

    @agent_location_city.setter
    def agent_location_city(self, agent_location_city):
        """Sets the agent_location_city of this UserAgentPatchObject.


        :param agent_location_city: The agent_location_city of this UserAgentPatchObject.  # noqa: E501
        :type: AllOfUserAgentPatchObjectAgentLocationCity
        """

        self._agent_location_city = agent_location_city

    @property
    def agent_location_country(self):
        """Gets the agent_location_country of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_location_country of this UserAgentPatchObject.  # noqa: E501
        :rtype: AllOfUserAgentPatchObjectAgentLocationCountry
        """
        return self._agent_location_country

    @agent_location_country.setter
    def agent_location_country(self, agent_location_country):
        """Sets the agent_location_country of this UserAgentPatchObject.


        :param agent_location_country: The agent_location_country of this UserAgentPatchObject.  # noqa: E501
        :type: AllOfUserAgentPatchObjectAgentLocationCountry
        """

        self._agent_location_country = agent_location_country

    @property
    def network(self):
        """Gets the network of this UserAgentPatchObject.  # noqa: E501


        :return: The network of this UserAgentPatchObject.  # noqa: E501
        :rtype: AgentInterfacesMetadata
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this UserAgentPatchObject.


        :param network: The network of this UserAgentPatchObject.  # noqa: E501
        :type: AgentInterfacesMetadata
        """

        self._network = network

    @property
    def agent_provider_id(self):
        """Gets the agent_provider_id of this UserAgentPatchObject.  # noqa: E501


        :return: The agent_provider_id of this UserAgentPatchObject.  # noqa: E501
        :rtype: AllOfUserAgentPatchObjectAgentProviderId
        """
        return self._agent_provider_id

    @agent_provider_id.setter
    def agent_provider_id(self, agent_provider_id):
        """Sets the agent_provider_id of this UserAgentPatchObject.


        :param agent_provider_id: The agent_provider_id of this UserAgentPatchObject.  # noqa: E501
        :type: AllOfUserAgentPatchObjectAgentProviderId
        """

        self._agent_provider_id = agent_provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserAgentPatchObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAgentPatchObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
