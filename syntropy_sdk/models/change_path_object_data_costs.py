# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ChangePathObjectDataCosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "price": "float",
        "latency": "float",
        "jitter": "float",
        "bandwidth": "float",
    }

    attribute_map = {
        "price": "price",
        "latency": "latency",
        "jitter": "jitter",
        "bandwidth": "bandwidth",
    }

    def __init__(
        self, price=None, latency=None, jitter=None, bandwidth=None
    ):  # noqa: E501
        """ChangePathObjectDataCosts - a model defined in Swagger"""  # noqa: E501
        self._price = None
        self._latency = None
        self._jitter = None
        self._bandwidth = None
        self.discriminator = None
        if price is not None:
            self.price = price
        if latency is not None:
            self.latency = latency
        if jitter is not None:
            self.jitter = jitter
        if bandwidth is not None:
            self.bandwidth = bandwidth

    @property
    def price(self):
        """Gets the price of this ChangePathObjectDataCosts.  # noqa: E501


        :return: The price of this ChangePathObjectDataCosts.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ChangePathObjectDataCosts.


        :param price: The price of this ChangePathObjectDataCosts.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def latency(self):
        """Gets the latency of this ChangePathObjectDataCosts.  # noqa: E501


        :return: The latency of this ChangePathObjectDataCosts.  # noqa: E501
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this ChangePathObjectDataCosts.


        :param latency: The latency of this ChangePathObjectDataCosts.  # noqa: E501
        :type: float
        """

        self._latency = latency

    @property
    def jitter(self):
        """Gets the jitter of this ChangePathObjectDataCosts.  # noqa: E501


        :return: The jitter of this ChangePathObjectDataCosts.  # noqa: E501
        :rtype: float
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter):
        """Sets the jitter of this ChangePathObjectDataCosts.


        :param jitter: The jitter of this ChangePathObjectDataCosts.  # noqa: E501
        :type: float
        """

        self._jitter = jitter

    @property
    def bandwidth(self):
        """Gets the bandwidth of this ChangePathObjectDataCosts.  # noqa: E501


        :return: The bandwidth of this ChangePathObjectDataCosts.  # noqa: E501
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this ChangePathObjectDataCosts.


        :param bandwidth: The bandwidth of this ChangePathObjectDataCosts.  # noqa: E501
        :type: float
        """

        self._bandwidth = bandwidth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ChangePathObjectDataCosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangePathObjectDataCosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
