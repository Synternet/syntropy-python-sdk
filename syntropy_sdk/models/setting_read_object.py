# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SettingReadObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "setting_key": "Object",
        "setting_value": "Object",
        "setting_value_default": "Object",
        "setting_value_type": "SettingsTypes",
    }

    attribute_map = {
        "setting_key": "setting_key",
        "setting_value": "setting_value",
        "setting_value_default": "setting_value_default",
        "setting_value_type": "setting_value_type",
    }

    def __init__(
        self,
        setting_key=None,
        setting_value=None,
        setting_value_default=None,
        setting_value_type=None,
    ):  # noqa: E501
        """SettingReadObject - a model defined in Swagger"""  # noqa: E501
        self._setting_key = None
        self._setting_value = None
        self._setting_value_default = None
        self._setting_value_type = None
        self.discriminator = None
        self.setting_key = setting_key
        self.setting_value = setting_value
        self.setting_value_default = setting_value_default
        self.setting_value_type = setting_value_type

    @property
    def setting_key(self):
        """Gets the setting_key of this SettingReadObject.  # noqa: E501


        :return: The setting_key of this SettingReadObject.  # noqa: E501
        :rtype: Object
        """
        return self._setting_key

    @setting_key.setter
    def setting_key(self, setting_key):
        """Sets the setting_key of this SettingReadObject.


        :param setting_key: The setting_key of this SettingReadObject.  # noqa: E501
        :type: Object
        """
        if setting_key is None:
            raise ValueError(
                "Invalid value for `setting_key`, must not be `None`"
            )  # noqa: E501

        self._setting_key = setting_key

    @property
    def setting_value(self):
        """Gets the setting_value of this SettingReadObject.  # noqa: E501


        :return: The setting_value of this SettingReadObject.  # noqa: E501
        :rtype: Object
        """
        return self._setting_value

    @setting_value.setter
    def setting_value(self, setting_value):
        """Sets the setting_value of this SettingReadObject.


        :param setting_value: The setting_value of this SettingReadObject.  # noqa: E501
        :type: Object
        """
        if setting_value is None:
            raise ValueError(
                "Invalid value for `setting_value`, must not be `None`"
            )  # noqa: E501

        self._setting_value = setting_value

    @property
    def setting_value_default(self):
        """Gets the setting_value_default of this SettingReadObject.  # noqa: E501


        :return: The setting_value_default of this SettingReadObject.  # noqa: E501
        :rtype: Object
        """
        return self._setting_value_default

    @setting_value_default.setter
    def setting_value_default(self, setting_value_default):
        """Sets the setting_value_default of this SettingReadObject.


        :param setting_value_default: The setting_value_default of this SettingReadObject.  # noqa: E501
        :type: Object
        """
        if setting_value_default is None:
            raise ValueError(
                "Invalid value for `setting_value_default`, must not be `None`"
            )  # noqa: E501

        self._setting_value_default = setting_value_default

    @property
    def setting_value_type(self):
        """Gets the setting_value_type of this SettingReadObject.  # noqa: E501


        :return: The setting_value_type of this SettingReadObject.  # noqa: E501
        :rtype: SettingsTypes
        """
        return self._setting_value_type

    @setting_value_type.setter
    def setting_value_type(self, setting_value_type):
        """Sets the setting_value_type of this SettingReadObject.


        :param setting_value_type: The setting_value_type of this SettingReadObject.  # noqa: E501
        :type: SettingsTypes
        """
        if setting_value_type is None:
            raise ValueError(
                "Invalid value for `setting_value_type`, must not be `None`"
            )  # noqa: E501

        self._setting_value_type = setting_value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SettingReadObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingReadObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
