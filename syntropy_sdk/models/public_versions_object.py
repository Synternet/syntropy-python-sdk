# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PublicVersionsObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "app_linux": "str",
        "app_windows": "str",
        "app_mac": "str",
        "app_ios": "str",
        "app_android": "str",
        "languages": "str",
        "content": "str",
        "translations": "str",
        "links": "str",
        "version": "str",
    }

    attribute_map = {
        "app_linux": "APP_LINUX",
        "app_windows": "APP_WINDOWS",
        "app_mac": "APP_MAC",
        "app_ios": "APP_IOS",
        "app_android": "APP_ANDROID",
        "languages": "LANGUAGES",
        "content": "CONTENT",
        "translations": "TRANSLATIONS",
        "links": "LINKS",
        "version": "VERSION",
    }

    def __init__(
        self,
        app_linux=None,
        app_windows=None,
        app_mac=None,
        app_ios=None,
        app_android=None,
        languages=None,
        content=None,
        translations=None,
        links=None,
        version=None,
    ):  # noqa: E501
        """PublicVersionsObject - a model defined in Swagger"""  # noqa: E501
        self._app_linux = None
        self._app_windows = None
        self._app_mac = None
        self._app_ios = None
        self._app_android = None
        self._languages = None
        self._content = None
        self._translations = None
        self._links = None
        self._version = None
        self.discriminator = None
        self.app_linux = app_linux
        self.app_windows = app_windows
        self.app_mac = app_mac
        self.app_ios = app_ios
        self.app_android = app_android
        self.languages = languages
        self.content = content
        self.translations = translations
        self.links = links
        if version is not None:
            self.version = version

    @property
    def app_linux(self):
        """Gets the app_linux of this PublicVersionsObject.  # noqa: E501


        :return: The app_linux of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._app_linux

    @app_linux.setter
    def app_linux(self, app_linux):
        """Sets the app_linux of this PublicVersionsObject.


        :param app_linux: The app_linux of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if app_linux is None:
            raise ValueError(
                "Invalid value for `app_linux`, must not be `None`"
            )  # noqa: E501

        self._app_linux = app_linux

    @property
    def app_windows(self):
        """Gets the app_windows of this PublicVersionsObject.  # noqa: E501


        :return: The app_windows of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._app_windows

    @app_windows.setter
    def app_windows(self, app_windows):
        """Sets the app_windows of this PublicVersionsObject.


        :param app_windows: The app_windows of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if app_windows is None:
            raise ValueError(
                "Invalid value for `app_windows`, must not be `None`"
            )  # noqa: E501

        self._app_windows = app_windows

    @property
    def app_mac(self):
        """Gets the app_mac of this PublicVersionsObject.  # noqa: E501


        :return: The app_mac of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._app_mac

    @app_mac.setter
    def app_mac(self, app_mac):
        """Sets the app_mac of this PublicVersionsObject.


        :param app_mac: The app_mac of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if app_mac is None:
            raise ValueError(
                "Invalid value for `app_mac`, must not be `None`"
            )  # noqa: E501

        self._app_mac = app_mac

    @property
    def app_ios(self):
        """Gets the app_ios of this PublicVersionsObject.  # noqa: E501


        :return: The app_ios of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._app_ios

    @app_ios.setter
    def app_ios(self, app_ios):
        """Sets the app_ios of this PublicVersionsObject.


        :param app_ios: The app_ios of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if app_ios is None:
            raise ValueError(
                "Invalid value for `app_ios`, must not be `None`"
            )  # noqa: E501

        self._app_ios = app_ios

    @property
    def app_android(self):
        """Gets the app_android of this PublicVersionsObject.  # noqa: E501


        :return: The app_android of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._app_android

    @app_android.setter
    def app_android(self, app_android):
        """Sets the app_android of this PublicVersionsObject.


        :param app_android: The app_android of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if app_android is None:
            raise ValueError(
                "Invalid value for `app_android`, must not be `None`"
            )  # noqa: E501

        self._app_android = app_android

    @property
    def languages(self):
        """Gets the languages of this PublicVersionsObject.  # noqa: E501


        :return: The languages of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this PublicVersionsObject.


        :param languages: The languages of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if languages is None:
            raise ValueError(
                "Invalid value for `languages`, must not be `None`"
            )  # noqa: E501

        self._languages = languages

    @property
    def content(self):
        """Gets the content of this PublicVersionsObject.  # noqa: E501


        :return: The content of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PublicVersionsObject.


        :param content: The content of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError(
                "Invalid value for `content`, must not be `None`"
            )  # noqa: E501

        self._content = content

    @property
    def translations(self):
        """Gets the translations of this PublicVersionsObject.  # noqa: E501


        :return: The translations of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this PublicVersionsObject.


        :param translations: The translations of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if translations is None:
            raise ValueError(
                "Invalid value for `translations`, must not be `None`"
            )  # noqa: E501

        self._translations = translations

    @property
    def links(self):
        """Gets the links of this PublicVersionsObject.  # noqa: E501


        :return: The links of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PublicVersionsObject.


        :param links: The links of this PublicVersionsObject.  # noqa: E501
        :type: str
        """
        if links is None:
            raise ValueError(
                "Invalid value for `links`, must not be `None`"
            )  # noqa: E501

        self._links = links

    @property
    def version(self):
        """Gets the version of this PublicVersionsObject.  # noqa: E501


        :return: The version of this PublicVersionsObject.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PublicVersionsObject.


        :param version: The version of this PublicVersionsObject.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PublicVersionsObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicVersionsObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
