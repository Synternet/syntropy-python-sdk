# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class S3ObjectListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "key": "str",
        "last_modified": "datetime",
        "e_tag": "str",
        "size": "float",
        "storage_class": "str",
        "owner": "S3ObjectListItemOwner",
    }

    attribute_map = {
        "key": "Key",
        "last_modified": "LastModified",
        "e_tag": "ETag",
        "size": "Size",
        "storage_class": "StorageClass",
        "owner": "Owner",
    }

    def __init__(
        self,
        key=None,
        last_modified=None,
        e_tag=None,
        size=None,
        storage_class=None,
        owner=None,
    ):  # noqa: E501
        """S3ObjectListItem - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._last_modified = None
        self._e_tag = None
        self._size = None
        self._storage_class = None
        self._owner = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if last_modified is not None:
            self.last_modified = last_modified
        if e_tag is not None:
            self.e_tag = e_tag
        if size is not None:
            self.size = size
        if storage_class is not None:
            self.storage_class = storage_class
        if owner is not None:
            self.owner = owner

    @property
    def key(self):
        """Gets the key of this S3ObjectListItem.  # noqa: E501


        :return: The key of this S3ObjectListItem.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this S3ObjectListItem.


        :param key: The key of this S3ObjectListItem.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def last_modified(self):
        """Gets the last_modified of this S3ObjectListItem.  # noqa: E501


        :return: The last_modified of this S3ObjectListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this S3ObjectListItem.


        :param last_modified: The last_modified of this S3ObjectListItem.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def e_tag(self):
        """Gets the e_tag of this S3ObjectListItem.  # noqa: E501


        :return: The e_tag of this S3ObjectListItem.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this S3ObjectListItem.


        :param e_tag: The e_tag of this S3ObjectListItem.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    @property
    def size(self):
        """Gets the size of this S3ObjectListItem.  # noqa: E501


        :return: The size of this S3ObjectListItem.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this S3ObjectListItem.


        :param size: The size of this S3ObjectListItem.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def storage_class(self):
        """Gets the storage_class of this S3ObjectListItem.  # noqa: E501


        :return: The storage_class of this S3ObjectListItem.  # noqa: E501
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this S3ObjectListItem.


        :param storage_class: The storage_class of this S3ObjectListItem.  # noqa: E501
        :type: str
        """

        self._storage_class = storage_class

    @property
    def owner(self):
        """Gets the owner of this S3ObjectListItem.  # noqa: E501


        :return: The owner of this S3ObjectListItem.  # noqa: E501
        :rtype: S3ObjectListItemOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this S3ObjectListItem.


        :param owner: The owner of this S3ObjectListItem.  # noqa: E501
        :type: S3ObjectListItemOwner
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(S3ObjectListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3ObjectListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
