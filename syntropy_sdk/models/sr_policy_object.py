# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SrPolicyObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "sr_policy_bsid": "str",
        "server_vin_id": "float",
        "server_ven_id": "float",
        "color_id": "float",
        "sr_policy_fallback": "bool",
        "sr_policy_bandwidth": "float",
        "sr_policy_price": "float",
        "sr_policy_jitter": "float",
        "sr_policy_latency": "float",
        "sr_policy_satisfy": "bool",
        "sr_policy_priority": "float",
        "sr_policy_status": "Status",
        "sr_policy_status_reason": "str",
        "sr_policy_hash": "str",
        "sr_policy_route": "list[float]",
    }

    attribute_map = {
        "sr_policy_bsid": "sr_policy_bsid",
        "server_vin_id": "server_vin_id",
        "server_ven_id": "server_ven_id",
        "color_id": "color_id",
        "sr_policy_fallback": "sr_policy_fallback",
        "sr_policy_bandwidth": "sr_policy_bandwidth",
        "sr_policy_price": "sr_policy_price",
        "sr_policy_jitter": "sr_policy_jitter",
        "sr_policy_latency": "sr_policy_latency",
        "sr_policy_satisfy": "sr_policy_satisfy",
        "sr_policy_priority": "sr_policy_priority",
        "sr_policy_status": "sr_policy_status",
        "sr_policy_status_reason": "sr_policy_status_reason",
        "sr_policy_hash": "sr_policy_hash",
        "sr_policy_route": "sr_policy_route",
    }

    def __init__(
        self,
        sr_policy_bsid=None,
        server_vin_id=None,
        server_ven_id=None,
        color_id=None,
        sr_policy_fallback=None,
        sr_policy_bandwidth=None,
        sr_policy_price=None,
        sr_policy_jitter=None,
        sr_policy_latency=None,
        sr_policy_satisfy=None,
        sr_policy_priority=None,
        sr_policy_status=None,
        sr_policy_status_reason=None,
        sr_policy_hash=None,
        sr_policy_route=None,
    ):  # noqa: E501
        """SrPolicyObject - a model defined in Swagger"""  # noqa: E501
        self._sr_policy_bsid = None
        self._server_vin_id = None
        self._server_ven_id = None
        self._color_id = None
        self._sr_policy_fallback = None
        self._sr_policy_bandwidth = None
        self._sr_policy_price = None
        self._sr_policy_jitter = None
        self._sr_policy_latency = None
        self._sr_policy_satisfy = None
        self._sr_policy_priority = None
        self._sr_policy_status = None
        self._sr_policy_status_reason = None
        self._sr_policy_hash = None
        self._sr_policy_route = None
        self.discriminator = None
        if sr_policy_bsid is not None:
            self.sr_policy_bsid = sr_policy_bsid
        self.server_vin_id = server_vin_id
        self.server_ven_id = server_ven_id
        if color_id is not None:
            self.color_id = color_id
        self.sr_policy_fallback = sr_policy_fallback
        if sr_policy_bandwidth is not None:
            self.sr_policy_bandwidth = sr_policy_bandwidth
        if sr_policy_price is not None:
            self.sr_policy_price = sr_policy_price
        if sr_policy_jitter is not None:
            self.sr_policy_jitter = sr_policy_jitter
        if sr_policy_latency is not None:
            self.sr_policy_latency = sr_policy_latency
        if sr_policy_satisfy is not None:
            self.sr_policy_satisfy = sr_policy_satisfy
        self.sr_policy_priority = sr_policy_priority
        self.sr_policy_status = sr_policy_status
        if sr_policy_status_reason is not None:
            self.sr_policy_status_reason = sr_policy_status_reason
        self.sr_policy_hash = sr_policy_hash
        self.sr_policy_route = sr_policy_route

    @property
    def sr_policy_bsid(self):
        """Gets the sr_policy_bsid of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_bsid of this SrPolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._sr_policy_bsid

    @sr_policy_bsid.setter
    def sr_policy_bsid(self, sr_policy_bsid):
        """Sets the sr_policy_bsid of this SrPolicyObject.


        :param sr_policy_bsid: The sr_policy_bsid of this SrPolicyObject.  # noqa: E501
        :type: str
        """

        self._sr_policy_bsid = sr_policy_bsid

    @property
    def server_vin_id(self):
        """Gets the server_vin_id of this SrPolicyObject.  # noqa: E501


        :return: The server_vin_id of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._server_vin_id

    @server_vin_id.setter
    def server_vin_id(self, server_vin_id):
        """Sets the server_vin_id of this SrPolicyObject.


        :param server_vin_id: The server_vin_id of this SrPolicyObject.  # noqa: E501
        :type: float
        """
        if server_vin_id is None:
            raise ValueError(
                "Invalid value for `server_vin_id`, must not be `None`"
            )  # noqa: E501

        self._server_vin_id = server_vin_id

    @property
    def server_ven_id(self):
        """Gets the server_ven_id of this SrPolicyObject.  # noqa: E501


        :return: The server_ven_id of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._server_ven_id

    @server_ven_id.setter
    def server_ven_id(self, server_ven_id):
        """Sets the server_ven_id of this SrPolicyObject.


        :param server_ven_id: The server_ven_id of this SrPolicyObject.  # noqa: E501
        :type: float
        """
        if server_ven_id is None:
            raise ValueError(
                "Invalid value for `server_ven_id`, must not be `None`"
            )  # noqa: E501

        self._server_ven_id = server_ven_id

    @property
    def color_id(self):
        """Gets the color_id of this SrPolicyObject.  # noqa: E501


        :return: The color_id of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._color_id

    @color_id.setter
    def color_id(self, color_id):
        """Sets the color_id of this SrPolicyObject.


        :param color_id: The color_id of this SrPolicyObject.  # noqa: E501
        :type: float
        """

        self._color_id = color_id

    @property
    def sr_policy_fallback(self):
        """Gets the sr_policy_fallback of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_fallback of this SrPolicyObject.  # noqa: E501
        :rtype: bool
        """
        return self._sr_policy_fallback

    @sr_policy_fallback.setter
    def sr_policy_fallback(self, sr_policy_fallback):
        """Sets the sr_policy_fallback of this SrPolicyObject.


        :param sr_policy_fallback: The sr_policy_fallback of this SrPolicyObject.  # noqa: E501
        :type: bool
        """
        if sr_policy_fallback is None:
            raise ValueError(
                "Invalid value for `sr_policy_fallback`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_fallback = sr_policy_fallback

    @property
    def sr_policy_bandwidth(self):
        """Gets the sr_policy_bandwidth of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_bandwidth of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_bandwidth

    @sr_policy_bandwidth.setter
    def sr_policy_bandwidth(self, sr_policy_bandwidth):
        """Sets the sr_policy_bandwidth of this SrPolicyObject.


        :param sr_policy_bandwidth: The sr_policy_bandwidth of this SrPolicyObject.  # noqa: E501
        :type: float
        """

        self._sr_policy_bandwidth = sr_policy_bandwidth

    @property
    def sr_policy_price(self):
        """Gets the sr_policy_price of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_price of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_price

    @sr_policy_price.setter
    def sr_policy_price(self, sr_policy_price):
        """Sets the sr_policy_price of this SrPolicyObject.


        :param sr_policy_price: The sr_policy_price of this SrPolicyObject.  # noqa: E501
        :type: float
        """

        self._sr_policy_price = sr_policy_price

    @property
    def sr_policy_jitter(self):
        """Gets the sr_policy_jitter of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_jitter of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_jitter

    @sr_policy_jitter.setter
    def sr_policy_jitter(self, sr_policy_jitter):
        """Sets the sr_policy_jitter of this SrPolicyObject.


        :param sr_policy_jitter: The sr_policy_jitter of this SrPolicyObject.  # noqa: E501
        :type: float
        """

        self._sr_policy_jitter = sr_policy_jitter

    @property
    def sr_policy_latency(self):
        """Gets the sr_policy_latency of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_latency of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_latency

    @sr_policy_latency.setter
    def sr_policy_latency(self, sr_policy_latency):
        """Sets the sr_policy_latency of this SrPolicyObject.


        :param sr_policy_latency: The sr_policy_latency of this SrPolicyObject.  # noqa: E501
        :type: float
        """

        self._sr_policy_latency = sr_policy_latency

    @property
    def sr_policy_satisfy(self):
        """Gets the sr_policy_satisfy of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_satisfy of this SrPolicyObject.  # noqa: E501
        :rtype: bool
        """
        return self._sr_policy_satisfy

    @sr_policy_satisfy.setter
    def sr_policy_satisfy(self, sr_policy_satisfy):
        """Sets the sr_policy_satisfy of this SrPolicyObject.


        :param sr_policy_satisfy: The sr_policy_satisfy of this SrPolicyObject.  # noqa: E501
        :type: bool
        """

        self._sr_policy_satisfy = sr_policy_satisfy

    @property
    def sr_policy_priority(self):
        """Gets the sr_policy_priority of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_priority of this SrPolicyObject.  # noqa: E501
        :rtype: float
        """
        return self._sr_policy_priority

    @sr_policy_priority.setter
    def sr_policy_priority(self, sr_policy_priority):
        """Sets the sr_policy_priority of this SrPolicyObject.


        :param sr_policy_priority: The sr_policy_priority of this SrPolicyObject.  # noqa: E501
        :type: float
        """
        if sr_policy_priority is None:
            raise ValueError(
                "Invalid value for `sr_policy_priority`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_priority = sr_policy_priority

    @property
    def sr_policy_status(self):
        """Gets the sr_policy_status of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_status of this SrPolicyObject.  # noqa: E501
        :rtype: Status
        """
        return self._sr_policy_status

    @sr_policy_status.setter
    def sr_policy_status(self, sr_policy_status):
        """Sets the sr_policy_status of this SrPolicyObject.


        :param sr_policy_status: The sr_policy_status of this SrPolicyObject.  # noqa: E501
        :type: Status
        """
        if sr_policy_status is None:
            raise ValueError(
                "Invalid value for `sr_policy_status`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_status = sr_policy_status

    @property
    def sr_policy_status_reason(self):
        """Gets the sr_policy_status_reason of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_status_reason of this SrPolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._sr_policy_status_reason

    @sr_policy_status_reason.setter
    def sr_policy_status_reason(self, sr_policy_status_reason):
        """Sets the sr_policy_status_reason of this SrPolicyObject.


        :param sr_policy_status_reason: The sr_policy_status_reason of this SrPolicyObject.  # noqa: E501
        :type: str
        """

        self._sr_policy_status_reason = sr_policy_status_reason

    @property
    def sr_policy_hash(self):
        """Gets the sr_policy_hash of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_hash of this SrPolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._sr_policy_hash

    @sr_policy_hash.setter
    def sr_policy_hash(self, sr_policy_hash):
        """Sets the sr_policy_hash of this SrPolicyObject.


        :param sr_policy_hash: The sr_policy_hash of this SrPolicyObject.  # noqa: E501
        :type: str
        """
        if sr_policy_hash is None:
            raise ValueError(
                "Invalid value for `sr_policy_hash`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_hash = sr_policy_hash

    @property
    def sr_policy_route(self):
        """Gets the sr_policy_route of this SrPolicyObject.  # noqa: E501


        :return: The sr_policy_route of this SrPolicyObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._sr_policy_route

    @sr_policy_route.setter
    def sr_policy_route(self, sr_policy_route):
        """Sets the sr_policy_route of this SrPolicyObject.


        :param sr_policy_route: The sr_policy_route of this SrPolicyObject.  # noqa: E501
        :type: list[float]
        """
        if sr_policy_route is None:
            raise ValueError(
                "Invalid value for `sr_policy_route`, must not be `None`"
            )  # noqa: E501

        self._sr_policy_route = sr_policy_route

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SrPolicyObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SrPolicyObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
