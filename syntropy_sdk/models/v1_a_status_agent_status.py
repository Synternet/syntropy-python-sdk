# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V1AStatusAgentStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "iface_active": "str",
        "public_last_handshake": "str",
        "public_latency": "float",
        "public_packet_loss": "float",
        "public_status": "str",
        "public_warnings": "list[str]",
        "sdn1_last_handshake": "str",
        "sdn1_latency": "float",
        "sdn1_packet_loss": "float",
        "sdn1_path": "list[int]",
        "sdn1_status": "str",
        "sdn1_warnings": "list[str]",
        "sdn2_last_handshake": "str",
        "sdn2_latency": "float",
        "sdn2_packet_loss": "float",
        "sdn2_path": "list[int]",
        "sdn2_status": "str",
        "sdn2_warnings": "list[str]",
        "sdn3_last_handshake": "str",
        "sdn3_latency": "float",
        "sdn3_packet_loss": "float",
        "sdn3_path": "list[int]",
        "sdn3_status": "str",
        "sdn3_warnings": "list[str]",
        "status": "str",
        "updated_at": "str",
    }

    attribute_map = {
        "iface_active": "iface_active",
        "public_last_handshake": "public_last_handshake",
        "public_latency": "public_latency",
        "public_packet_loss": "public_packet_loss",
        "public_status": "public_status",
        "public_warnings": "public_warnings",
        "sdn1_last_handshake": "sdn1_last_handshake",
        "sdn1_latency": "sdn1_latency",
        "sdn1_packet_loss": "sdn1_packet_loss",
        "sdn1_path": "sdn1_path",
        "sdn1_status": "sdn1_status",
        "sdn1_warnings": "sdn1_warnings",
        "sdn2_last_handshake": "sdn2_last_handshake",
        "sdn2_latency": "sdn2_latency",
        "sdn2_packet_loss": "sdn2_packet_loss",
        "sdn2_path": "sdn2_path",
        "sdn2_status": "sdn2_status",
        "sdn2_warnings": "sdn2_warnings",
        "sdn3_last_handshake": "sdn3_last_handshake",
        "sdn3_latency": "sdn3_latency",
        "sdn3_packet_loss": "sdn3_packet_loss",
        "sdn3_path": "sdn3_path",
        "sdn3_status": "sdn3_status",
        "sdn3_warnings": "sdn3_warnings",
        "status": "status",
        "updated_at": "updated_at",
    }

    def __init__(
        self,
        iface_active=None,
        public_last_handshake=None,
        public_latency=None,
        public_packet_loss=None,
        public_status=None,
        public_warnings=None,
        sdn1_last_handshake=None,
        sdn1_latency=None,
        sdn1_packet_loss=None,
        sdn1_path=None,
        sdn1_status=None,
        sdn1_warnings=None,
        sdn2_last_handshake=None,
        sdn2_latency=None,
        sdn2_packet_loss=None,
        sdn2_path=None,
        sdn2_status=None,
        sdn2_warnings=None,
        sdn3_last_handshake=None,
        sdn3_latency=None,
        sdn3_packet_loss=None,
        sdn3_path=None,
        sdn3_status=None,
        sdn3_warnings=None,
        status=None,
        updated_at=None,
    ):  # noqa: E501
        """V1AStatusAgentStatus - a model defined in Swagger"""  # noqa: E501
        self._iface_active = None
        self._public_last_handshake = None
        self._public_latency = None
        self._public_packet_loss = None
        self._public_status = None
        self._public_warnings = None
        self._sdn1_last_handshake = None
        self._sdn1_latency = None
        self._sdn1_packet_loss = None
        self._sdn1_path = None
        self._sdn1_status = None
        self._sdn1_warnings = None
        self._sdn2_last_handshake = None
        self._sdn2_latency = None
        self._sdn2_packet_loss = None
        self._sdn2_path = None
        self._sdn2_status = None
        self._sdn2_warnings = None
        self._sdn3_last_handshake = None
        self._sdn3_latency = None
        self._sdn3_packet_loss = None
        self._sdn3_path = None
        self._sdn3_status = None
        self._sdn3_warnings = None
        self._status = None
        self._updated_at = None
        self.discriminator = None
        self.iface_active = iface_active
        self.public_last_handshake = public_last_handshake
        self.public_latency = public_latency
        self.public_packet_loss = public_packet_loss
        self.public_status = public_status
        self.public_warnings = public_warnings
        self.sdn1_last_handshake = sdn1_last_handshake
        self.sdn1_latency = sdn1_latency
        self.sdn1_packet_loss = sdn1_packet_loss
        self.sdn1_path = sdn1_path
        self.sdn1_status = sdn1_status
        self.sdn1_warnings = sdn1_warnings
        self.sdn2_last_handshake = sdn2_last_handshake
        self.sdn2_latency = sdn2_latency
        self.sdn2_packet_loss = sdn2_packet_loss
        self.sdn2_path = sdn2_path
        self.sdn2_status = sdn2_status
        self.sdn2_warnings = sdn2_warnings
        self.sdn3_last_handshake = sdn3_last_handshake
        self.sdn3_latency = sdn3_latency
        self.sdn3_packet_loss = sdn3_packet_loss
        self.sdn3_path = sdn3_path
        self.sdn3_status = sdn3_status
        self.sdn3_warnings = sdn3_warnings
        self.status = status
        self.updated_at = updated_at

    @property
    def iface_active(self):
        """Gets the iface_active of this V1AStatusAgentStatus.  # noqa: E501


        :return: The iface_active of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._iface_active

    @iface_active.setter
    def iface_active(self, iface_active):
        """Sets the iface_active of this V1AStatusAgentStatus.


        :param iface_active: The iface_active of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if iface_active is None:
            raise ValueError(
                "Invalid value for `iface_active`, must not be `None`"
            )  # noqa: E501

        self._iface_active = iface_active

    @property
    def public_last_handshake(self):
        """Gets the public_last_handshake of this V1AStatusAgentStatus.  # noqa: E501


        :return: The public_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._public_last_handshake

    @public_last_handshake.setter
    def public_last_handshake(self, public_last_handshake):
        """Sets the public_last_handshake of this V1AStatusAgentStatus.


        :param public_last_handshake: The public_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if public_last_handshake is None:
            raise ValueError(
                "Invalid value for `public_last_handshake`, must not be `None`"
            )  # noqa: E501

        self._public_last_handshake = public_last_handshake

    @property
    def public_latency(self):
        """Gets the public_latency of this V1AStatusAgentStatus.  # noqa: E501


        :return: The public_latency of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._public_latency

    @public_latency.setter
    def public_latency(self, public_latency):
        """Sets the public_latency of this V1AStatusAgentStatus.


        :param public_latency: The public_latency of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if public_latency is None:
            raise ValueError(
                "Invalid value for `public_latency`, must not be `None`"
            )  # noqa: E501

        self._public_latency = public_latency

    @property
    def public_packet_loss(self):
        """Gets the public_packet_loss of this V1AStatusAgentStatus.  # noqa: E501


        :return: The public_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._public_packet_loss

    @public_packet_loss.setter
    def public_packet_loss(self, public_packet_loss):
        """Sets the public_packet_loss of this V1AStatusAgentStatus.


        :param public_packet_loss: The public_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if public_packet_loss is None:
            raise ValueError(
                "Invalid value for `public_packet_loss`, must not be `None`"
            )  # noqa: E501

        self._public_packet_loss = public_packet_loss

    @property
    def public_status(self):
        """Gets the public_status of this V1AStatusAgentStatus.  # noqa: E501


        :return: The public_status of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._public_status

    @public_status.setter
    def public_status(self, public_status):
        """Sets the public_status of this V1AStatusAgentStatus.


        :param public_status: The public_status of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if public_status is None:
            raise ValueError(
                "Invalid value for `public_status`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if public_status not in allowed_values:
            raise ValueError(
                "Invalid value for `public_status` ({0}), must be one of {1}".format(  # noqa: E501
                    public_status, allowed_values
                )
            )

        self._public_status = public_status

    @property
    def public_warnings(self):
        """Gets the public_warnings of this V1AStatusAgentStatus.  # noqa: E501


        :return: The public_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_warnings

    @public_warnings.setter
    def public_warnings(self, public_warnings):
        """Sets the public_warnings of this V1AStatusAgentStatus.


        :param public_warnings: The public_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[str]
        """
        if public_warnings is None:
            raise ValueError(
                "Invalid value for `public_warnings`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["PACKET_LOSS", "LATENCY", "HANDSHAKE"]  # noqa: E501
        if not set(public_warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `public_warnings` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(public_warnings) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._public_warnings = public_warnings

    @property
    def sdn1_last_handshake(self):
        """Gets the sdn1_last_handshake of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn1_last_handshake

    @sdn1_last_handshake.setter
    def sdn1_last_handshake(self, sdn1_last_handshake):
        """Sets the sdn1_last_handshake of this V1AStatusAgentStatus.


        :param sdn1_last_handshake: The sdn1_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn1_last_handshake is None:
            raise ValueError(
                "Invalid value for `sdn1_last_handshake`, must not be `None`"
            )  # noqa: E501

        self._sdn1_last_handshake = sdn1_last_handshake

    @property
    def sdn1_latency(self):
        """Gets the sdn1_latency of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_latency of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn1_latency

    @sdn1_latency.setter
    def sdn1_latency(self, sdn1_latency):
        """Sets the sdn1_latency of this V1AStatusAgentStatus.


        :param sdn1_latency: The sdn1_latency of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn1_latency is None:
            raise ValueError(
                "Invalid value for `sdn1_latency`, must not be `None`"
            )  # noqa: E501

        self._sdn1_latency = sdn1_latency

    @property
    def sdn1_packet_loss(self):
        """Gets the sdn1_packet_loss of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn1_packet_loss

    @sdn1_packet_loss.setter
    def sdn1_packet_loss(self, sdn1_packet_loss):
        """Sets the sdn1_packet_loss of this V1AStatusAgentStatus.


        :param sdn1_packet_loss: The sdn1_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn1_packet_loss is None:
            raise ValueError(
                "Invalid value for `sdn1_packet_loss`, must not be `None`"
            )  # noqa: E501

        self._sdn1_packet_loss = sdn1_packet_loss

    @property
    def sdn1_path(self):
        """Gets the sdn1_path of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_path of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._sdn1_path

    @sdn1_path.setter
    def sdn1_path(self, sdn1_path):
        """Sets the sdn1_path of this V1AStatusAgentStatus.


        :param sdn1_path: The sdn1_path of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[int]
        """
        if sdn1_path is None:
            raise ValueError(
                "Invalid value for `sdn1_path`, must not be `None`"
            )  # noqa: E501

        self._sdn1_path = sdn1_path

    @property
    def sdn1_status(self):
        """Gets the sdn1_status of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_status of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn1_status

    @sdn1_status.setter
    def sdn1_status(self, sdn1_status):
        """Sets the sdn1_status of this V1AStatusAgentStatus.


        :param sdn1_status: The sdn1_status of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn1_status is None:
            raise ValueError(
                "Invalid value for `sdn1_status`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if sdn1_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sdn1_status` ({0}), must be one of {1}".format(  # noqa: E501
                    sdn1_status, allowed_values
                )
            )

        self._sdn1_status = sdn1_status

    @property
    def sdn1_warnings(self):
        """Gets the sdn1_warnings of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn1_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._sdn1_warnings

    @sdn1_warnings.setter
    def sdn1_warnings(self, sdn1_warnings):
        """Sets the sdn1_warnings of this V1AStatusAgentStatus.


        :param sdn1_warnings: The sdn1_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[str]
        """
        if sdn1_warnings is None:
            raise ValueError(
                "Invalid value for `sdn1_warnings`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["PACKET_LOSS", "LATENCY", "HANDSHAKE"]  # noqa: E501
        if not set(sdn1_warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sdn1_warnings` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(sdn1_warnings) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._sdn1_warnings = sdn1_warnings

    @property
    def sdn2_last_handshake(self):
        """Gets the sdn2_last_handshake of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn2_last_handshake

    @sdn2_last_handshake.setter
    def sdn2_last_handshake(self, sdn2_last_handshake):
        """Sets the sdn2_last_handshake of this V1AStatusAgentStatus.


        :param sdn2_last_handshake: The sdn2_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn2_last_handshake is None:
            raise ValueError(
                "Invalid value for `sdn2_last_handshake`, must not be `None`"
            )  # noqa: E501

        self._sdn2_last_handshake = sdn2_last_handshake

    @property
    def sdn2_latency(self):
        """Gets the sdn2_latency of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_latency of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn2_latency

    @sdn2_latency.setter
    def sdn2_latency(self, sdn2_latency):
        """Sets the sdn2_latency of this V1AStatusAgentStatus.


        :param sdn2_latency: The sdn2_latency of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn2_latency is None:
            raise ValueError(
                "Invalid value for `sdn2_latency`, must not be `None`"
            )  # noqa: E501

        self._sdn2_latency = sdn2_latency

    @property
    def sdn2_packet_loss(self):
        """Gets the sdn2_packet_loss of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn2_packet_loss

    @sdn2_packet_loss.setter
    def sdn2_packet_loss(self, sdn2_packet_loss):
        """Sets the sdn2_packet_loss of this V1AStatusAgentStatus.


        :param sdn2_packet_loss: The sdn2_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn2_packet_loss is None:
            raise ValueError(
                "Invalid value for `sdn2_packet_loss`, must not be `None`"
            )  # noqa: E501

        self._sdn2_packet_loss = sdn2_packet_loss

    @property
    def sdn2_path(self):
        """Gets the sdn2_path of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_path of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._sdn2_path

    @sdn2_path.setter
    def sdn2_path(self, sdn2_path):
        """Sets the sdn2_path of this V1AStatusAgentStatus.


        :param sdn2_path: The sdn2_path of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[int]
        """
        if sdn2_path is None:
            raise ValueError(
                "Invalid value for `sdn2_path`, must not be `None`"
            )  # noqa: E501

        self._sdn2_path = sdn2_path

    @property
    def sdn2_status(self):
        """Gets the sdn2_status of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_status of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn2_status

    @sdn2_status.setter
    def sdn2_status(self, sdn2_status):
        """Sets the sdn2_status of this V1AStatusAgentStatus.


        :param sdn2_status: The sdn2_status of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn2_status is None:
            raise ValueError(
                "Invalid value for `sdn2_status`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if sdn2_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sdn2_status` ({0}), must be one of {1}".format(  # noqa: E501
                    sdn2_status, allowed_values
                )
            )

        self._sdn2_status = sdn2_status

    @property
    def sdn2_warnings(self):
        """Gets the sdn2_warnings of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn2_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._sdn2_warnings

    @sdn2_warnings.setter
    def sdn2_warnings(self, sdn2_warnings):
        """Sets the sdn2_warnings of this V1AStatusAgentStatus.


        :param sdn2_warnings: The sdn2_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[str]
        """
        if sdn2_warnings is None:
            raise ValueError(
                "Invalid value for `sdn2_warnings`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["PACKET_LOSS", "LATENCY", "HANDSHAKE"]  # noqa: E501
        if not set(sdn2_warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sdn2_warnings` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(sdn2_warnings) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._sdn2_warnings = sdn2_warnings

    @property
    def sdn3_last_handshake(self):
        """Gets the sdn3_last_handshake of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn3_last_handshake

    @sdn3_last_handshake.setter
    def sdn3_last_handshake(self, sdn3_last_handshake):
        """Sets the sdn3_last_handshake of this V1AStatusAgentStatus.


        :param sdn3_last_handshake: The sdn3_last_handshake of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn3_last_handshake is None:
            raise ValueError(
                "Invalid value for `sdn3_last_handshake`, must not be `None`"
            )  # noqa: E501

        self._sdn3_last_handshake = sdn3_last_handshake

    @property
    def sdn3_latency(self):
        """Gets the sdn3_latency of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_latency of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn3_latency

    @sdn3_latency.setter
    def sdn3_latency(self, sdn3_latency):
        """Sets the sdn3_latency of this V1AStatusAgentStatus.


        :param sdn3_latency: The sdn3_latency of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn3_latency is None:
            raise ValueError(
                "Invalid value for `sdn3_latency`, must not be `None`"
            )  # noqa: E501

        self._sdn3_latency = sdn3_latency

    @property
    def sdn3_packet_loss(self):
        """Gets the sdn3_packet_loss of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: float
        """
        return self._sdn3_packet_loss

    @sdn3_packet_loss.setter
    def sdn3_packet_loss(self, sdn3_packet_loss):
        """Sets the sdn3_packet_loss of this V1AStatusAgentStatus.


        :param sdn3_packet_loss: The sdn3_packet_loss of this V1AStatusAgentStatus.  # noqa: E501
        :type: float
        """
        if sdn3_packet_loss is None:
            raise ValueError(
                "Invalid value for `sdn3_packet_loss`, must not be `None`"
            )  # noqa: E501

        self._sdn3_packet_loss = sdn3_packet_loss

    @property
    def sdn3_path(self):
        """Gets the sdn3_path of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_path of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._sdn3_path

    @sdn3_path.setter
    def sdn3_path(self, sdn3_path):
        """Sets the sdn3_path of this V1AStatusAgentStatus.


        :param sdn3_path: The sdn3_path of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[int]
        """
        if sdn3_path is None:
            raise ValueError(
                "Invalid value for `sdn3_path`, must not be `None`"
            )  # noqa: E501

        self._sdn3_path = sdn3_path

    @property
    def sdn3_status(self):
        """Gets the sdn3_status of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_status of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._sdn3_status

    @sdn3_status.setter
    def sdn3_status(self, sdn3_status):
        """Sets the sdn3_status of this V1AStatusAgentStatus.


        :param sdn3_status: The sdn3_status of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if sdn3_status is None:
            raise ValueError(
                "Invalid value for `sdn3_status`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if sdn3_status not in allowed_values:
            raise ValueError(
                "Invalid value for `sdn3_status` ({0}), must be one of {1}".format(  # noqa: E501
                    sdn3_status, allowed_values
                )
            )

        self._sdn3_status = sdn3_status

    @property
    def sdn3_warnings(self):
        """Gets the sdn3_warnings of this V1AStatusAgentStatus.  # noqa: E501


        :return: The sdn3_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._sdn3_warnings

    @sdn3_warnings.setter
    def sdn3_warnings(self, sdn3_warnings):
        """Sets the sdn3_warnings of this V1AStatusAgentStatus.


        :param sdn3_warnings: The sdn3_warnings of this V1AStatusAgentStatus.  # noqa: E501
        :type: list[str]
        """
        if sdn3_warnings is None:
            raise ValueError(
                "Invalid value for `sdn3_warnings`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["PACKET_LOSS", "LATENCY", "HANDSHAKE"]  # noqa: E501
        if not set(sdn3_warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sdn3_warnings` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(
                        map(str, set(sdn3_warnings) - set(allowed_values))
                    ),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._sdn3_warnings = sdn3_warnings

    @property
    def status(self):
        """Gets the status of this V1AStatusAgentStatus.  # noqa: E501


        :return: The status of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1AStatusAgentStatus.


        :param status: The status of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError(
                "Invalid value for `status`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["OK", "WARNING", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this V1AStatusAgentStatus.  # noqa: E501


        :return: The updated_at of this V1AStatusAgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1AStatusAgentStatus.


        :param updated_at: The updated_at of this V1AStatusAgentStatus.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError(
                "Invalid value for `updated_at`, must not be `None`"
            )  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1AStatusAgentStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AStatusAgentStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
