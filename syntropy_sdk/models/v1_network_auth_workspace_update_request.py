# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V1NetworkAuthWorkspaceUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"workspace_name": "WorkspaceName", "workspace_require_2fa": "bool"}

    attribute_map = {
        "workspace_name": "workspace_name",
        "workspace_require_2fa": "workspace_require_2fa",
    }

    def __init__(self, workspace_name=None, workspace_require_2fa=None):  # noqa: E501
        """V1NetworkAuthWorkspaceUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._workspace_name = None
        self._workspace_require_2fa = None
        self.discriminator = None
        if workspace_name is not None:
            self.workspace_name = workspace_name
        if workspace_require_2fa is not None:
            self.workspace_require_2fa = workspace_require_2fa

    @property
    def workspace_name(self):
        """Gets the workspace_name of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501


        :return: The workspace_name of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501
        :rtype: WorkspaceName
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this V1NetworkAuthWorkspaceUpdateRequest.


        :param workspace_name: The workspace_name of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501
        :type: WorkspaceName
        """

        self._workspace_name = workspace_name

    @property
    def workspace_require_2fa(self):
        """Gets the workspace_require_2fa of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501


        :return: The workspace_require_2fa of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._workspace_require_2fa

    @workspace_require_2fa.setter
    def workspace_require_2fa(self, workspace_require_2fa):
        """Sets the workspace_require_2fa of this V1NetworkAuthWorkspaceUpdateRequest.


        :param workspace_require_2fa: The workspace_require_2fa of this V1NetworkAuthWorkspaceUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._workspace_require_2fa = workspace_require_2fa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1NetworkAuthWorkspaceUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1NetworkAuthWorkspaceUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
