# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LogsReadTimestampObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "logs_read_timestamp_entity_id": "IdNumber",
        "logs_read_timestamp_entity_type": "LogsReadTimestampEntityTypes",
        "logs_read_timestamp_last_read_timestamp": "DefaultString",
    }

    attribute_map = {
        "logs_read_timestamp_entity_id": "logs_read_timestamp_entity_id",
        "logs_read_timestamp_entity_type": "logs_read_timestamp_entity_type",
        "logs_read_timestamp_last_read_timestamp": "logs_read_timestamp_last_read_timestamp",
    }

    def __init__(
        self,
        logs_read_timestamp_entity_id=None,
        logs_read_timestamp_entity_type=None,
        logs_read_timestamp_last_read_timestamp=None,
    ):  # noqa: E501
        """LogsReadTimestampObject - a model defined in Swagger"""  # noqa: E501
        self._logs_read_timestamp_entity_id = None
        self._logs_read_timestamp_entity_type = None
        self._logs_read_timestamp_last_read_timestamp = None
        self.discriminator = None
        self.logs_read_timestamp_entity_id = logs_read_timestamp_entity_id
        self.logs_read_timestamp_entity_type = logs_read_timestamp_entity_type
        self.logs_read_timestamp_last_read_timestamp = (
            logs_read_timestamp_last_read_timestamp
        )

    @property
    def logs_read_timestamp_entity_id(self):
        """Gets the logs_read_timestamp_entity_id of this LogsReadTimestampObject.  # noqa: E501


        :return: The logs_read_timestamp_entity_id of this LogsReadTimestampObject.  # noqa: E501
        :rtype: IdNumber
        """
        return self._logs_read_timestamp_entity_id

    @logs_read_timestamp_entity_id.setter
    def logs_read_timestamp_entity_id(self, logs_read_timestamp_entity_id):
        """Sets the logs_read_timestamp_entity_id of this LogsReadTimestampObject.


        :param logs_read_timestamp_entity_id: The logs_read_timestamp_entity_id of this LogsReadTimestampObject.  # noqa: E501
        :type: IdNumber
        """
        if logs_read_timestamp_entity_id is None:
            raise ValueError(
                "Invalid value for `logs_read_timestamp_entity_id`, must not be `None`"
            )  # noqa: E501

        self._logs_read_timestamp_entity_id = logs_read_timestamp_entity_id

    @property
    def logs_read_timestamp_entity_type(self):
        """Gets the logs_read_timestamp_entity_type of this LogsReadTimestampObject.  # noqa: E501


        :return: The logs_read_timestamp_entity_type of this LogsReadTimestampObject.  # noqa: E501
        :rtype: LogsReadTimestampEntityTypes
        """
        return self._logs_read_timestamp_entity_type

    @logs_read_timestamp_entity_type.setter
    def logs_read_timestamp_entity_type(self, logs_read_timestamp_entity_type):
        """Sets the logs_read_timestamp_entity_type of this LogsReadTimestampObject.


        :param logs_read_timestamp_entity_type: The logs_read_timestamp_entity_type of this LogsReadTimestampObject.  # noqa: E501
        :type: LogsReadTimestampEntityTypes
        """
        if logs_read_timestamp_entity_type is None:
            raise ValueError(
                "Invalid value for `logs_read_timestamp_entity_type`, must not be `None`"
            )  # noqa: E501

        self._logs_read_timestamp_entity_type = logs_read_timestamp_entity_type

    @property
    def logs_read_timestamp_last_read_timestamp(self):
        """Gets the logs_read_timestamp_last_read_timestamp of this LogsReadTimestampObject.  # noqa: E501


        :return: The logs_read_timestamp_last_read_timestamp of this LogsReadTimestampObject.  # noqa: E501
        :rtype: DefaultString
        """
        return self._logs_read_timestamp_last_read_timestamp

    @logs_read_timestamp_last_read_timestamp.setter
    def logs_read_timestamp_last_read_timestamp(
        self, logs_read_timestamp_last_read_timestamp
    ):
        """Sets the logs_read_timestamp_last_read_timestamp of this LogsReadTimestampObject.


        :param logs_read_timestamp_last_read_timestamp: The logs_read_timestamp_last_read_timestamp of this LogsReadTimestampObject.  # noqa: E501
        :type: DefaultString
        """
        if logs_read_timestamp_last_read_timestamp is None:
            raise ValueError(
                "Invalid value for `logs_read_timestamp_last_read_timestamp`, must not be `None`"
            )  # noqa: E501

        self._logs_read_timestamp_last_read_timestamp = (
            logs_read_timestamp_last_read_timestamp
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(LogsReadTimestampObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogsReadTimestampObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
