# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AgentLogSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "timestamp": "str",
        "message": "str",
        "labels": "AgentLogLabels",
        "log": "AgentLogLog",
    }

    attribute_map = {
        "timestamp": "@timestamp",
        "message": "message",
        "labels": "labels",
        "log": "log",
    }

    def __init__(
        self, timestamp=None, message=None, labels=None, log=None
    ):  # noqa: E501
        """AgentLogSource - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._message = None
        self._labels = None
        self._log = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if message is not None:
            self.message = message
        if labels is not None:
            self.labels = labels
        if log is not None:
            self.log = log

    @property
    def timestamp(self):
        """Gets the timestamp of this AgentLogSource.  # noqa: E501


        :return: The timestamp of this AgentLogSource.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AgentLogSource.


        :param timestamp: The timestamp of this AgentLogSource.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this AgentLogSource.  # noqa: E501


        :return: The message of this AgentLogSource.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AgentLogSource.


        :param message: The message of this AgentLogSource.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def labels(self):
        """Gets the labels of this AgentLogSource.  # noqa: E501


        :return: The labels of this AgentLogSource.  # noqa: E501
        :rtype: AgentLogLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AgentLogSource.


        :param labels: The labels of this AgentLogSource.  # noqa: E501
        :type: AgentLogLabels
        """

        self._labels = labels

    @property
    def log(self):
        """Gets the log of this AgentLogSource.  # noqa: E501


        :return: The log of this AgentLogSource.  # noqa: E501
        :rtype: AgentLogLog
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this AgentLogSource.


        :param log: The log of this AgentLogSource.  # noqa: E501
        :type: AgentLogLog
        """

        self._log = log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AgentLogSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentLogSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
