# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V1AgentSettingsReroutingThreshold(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "default": "bool",
        "latency_ratio_default": "float",
        "latency_diff_default": "int",
        "latency_ratio": "float",
        "latency_diff": "int",
    }

    attribute_map = {
        "default": "default",
        "latency_ratio_default": "latency_ratio_default",
        "latency_diff_default": "latency_diff_default",
        "latency_ratio": "latency_ratio",
        "latency_diff": "latency_diff",
    }

    def __init__(
        self,
        default=None,
        latency_ratio_default=None,
        latency_diff_default=None,
        latency_ratio=None,
        latency_diff=None,
    ):  # noqa: E501
        """V1AgentSettingsReroutingThreshold - a model defined in Swagger"""  # noqa: E501
        self._default = None
        self._latency_ratio_default = None
        self._latency_diff_default = None
        self._latency_ratio = None
        self._latency_diff = None
        self.discriminator = None
        self.default = default
        self.latency_ratio_default = latency_ratio_default
        self.latency_diff_default = latency_diff_default
        self.latency_ratio = latency_ratio
        self.latency_diff = latency_diff

    @property
    def default(self):
        """Gets the default of this V1AgentSettingsReroutingThreshold.  # noqa: E501


        :return: The default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this V1AgentSettingsReroutingThreshold.


        :param default: The default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :type: bool
        """
        if default is None:
            raise ValueError(
                "Invalid value for `default`, must not be `None`"
            )  # noqa: E501

        self._default = default

    @property
    def latency_ratio_default(self):
        """Gets the latency_ratio_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501


        :return: The latency_ratio_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :rtype: float
        """
        return self._latency_ratio_default

    @latency_ratio_default.setter
    def latency_ratio_default(self, latency_ratio_default):
        """Sets the latency_ratio_default of this V1AgentSettingsReroutingThreshold.


        :param latency_ratio_default: The latency_ratio_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :type: float
        """
        if latency_ratio_default is None:
            raise ValueError(
                "Invalid value for `latency_ratio_default`, must not be `None`"
            )  # noqa: E501

        self._latency_ratio_default = latency_ratio_default

    @property
    def latency_diff_default(self):
        """Gets the latency_diff_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501


        :return: The latency_diff_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :rtype: int
        """
        return self._latency_diff_default

    @latency_diff_default.setter
    def latency_diff_default(self, latency_diff_default):
        """Sets the latency_diff_default of this V1AgentSettingsReroutingThreshold.


        :param latency_diff_default: The latency_diff_default of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :type: int
        """
        if latency_diff_default is None:
            raise ValueError(
                "Invalid value for `latency_diff_default`, must not be `None`"
            )  # noqa: E501

        self._latency_diff_default = latency_diff_default

    @property
    def latency_ratio(self):
        """Gets the latency_ratio of this V1AgentSettingsReroutingThreshold.  # noqa: E501


        :return: The latency_ratio of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :rtype: float
        """
        return self._latency_ratio

    @latency_ratio.setter
    def latency_ratio(self, latency_ratio):
        """Sets the latency_ratio of this V1AgentSettingsReroutingThreshold.


        :param latency_ratio: The latency_ratio of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :type: float
        """
        if latency_ratio is None:
            raise ValueError(
                "Invalid value for `latency_ratio`, must not be `None`"
            )  # noqa: E501

        self._latency_ratio = latency_ratio

    @property
    def latency_diff(self):
        """Gets the latency_diff of this V1AgentSettingsReroutingThreshold.  # noqa: E501


        :return: The latency_diff of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :rtype: int
        """
        return self._latency_diff

    @latency_diff.setter
    def latency_diff(self, latency_diff):
        """Sets the latency_diff of this V1AgentSettingsReroutingThreshold.


        :param latency_diff: The latency_diff of this V1AgentSettingsReroutingThreshold.  # noqa: E501
        :type: int
        """
        if latency_diff is None:
            raise ValueError(
                "Invalid value for `latency_diff`, must not be `None`"
            )  # noqa: E501

        self._latency_diff = latency_diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1AgentSettingsReroutingThreshold, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AgentSettingsReroutingThreshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
