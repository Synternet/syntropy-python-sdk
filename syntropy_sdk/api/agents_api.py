# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from syntropy_sdk.api_client import ApiClient


class AgentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def platform_agent_config(self, agent_id, **kwargs):  # noqa: E501
        """Get agent config  # noqa: E501

        Show agent configuration details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_config(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: PlatformResponseAdminAgentConfig_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_config_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_config_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
            return data

    def platform_agent_config_with_http_info(self, agent_id, **kwargs):  # noqa: E501
        """Get agent config  # noqa: E501

        Show agent configuration details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_config_with_http_info(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: PlatformResponseAdminAgentConfig_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `platform_agent_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agent/{agent_id}/config",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAdminAgentConfig_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_coordinates(self, body, **kwargs):  # noqa: E501
        """Get coordinates  # noqa: E501

        Retrieves agent location coordinates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_coordinates(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentsCoordinatesBody body: (required)
        :return: PlatformResponseAgentCoordinatesObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_coordinates_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_coordinates_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_agent_coordinates_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get coordinates  # noqa: E501

        Retrieves agent location coordinates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_coordinates_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AgentsCoordinatesBody body: (required)
        :return: PlatformResponseAgentCoordinatesObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_coordinates" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_agent_coordinates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents/coordinates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentCoordinatesObjectArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_create(self, body, **kwargs):  # noqa: E501
        """Create agent  # noqa: E501

        Create new agent. Only `VIRTUAL` agents creation is supported. Not `VIRTUAL` agents are automatically created when first WebSocket connection is established.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAgentCreateObject body: (required)
        :return: PlatformResponseAgentCreateAgentObject_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_create_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_create_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_agent_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create agent  # noqa: E501

        Create new agent. Only `VIRTUAL` agents creation is supported. Not `VIRTUAL` agents are automatically created when first WebSocket connection is established.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAgentCreateObject body: (required)
        :return: PlatformResponseAgentCreateAgentObject_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_create" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_agent_create`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentCreateAgentObject_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_id_name_pairs(self, **kwargs):  # noqa: E501
        """Get agents (id,name)  # noqa: E501

        Get all agents names and ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_id_name_pairs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhereString filter: ids[]: array of agent ids, example: \"1;2;3\", id|name: agent id or agent name, example: \"name1\" or \"132\", name: exact agent name, example: \"name1\", statuses[]: one of: connected, connected_with_errors, disconnected, example: \"connected;connected_with_errors\", providers[]: array of providers ids, example: \"1;2;3\", tags[]: array of tags ids, example: \"1;2;3\", tags_names[]: array of tags name, example: \"name1;name2;name3\", connected[]: boolean to check if agent belongs to connection, example: \"true\",
        :return: PlatformResponseAgentFiltersObject_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_id_name_pairs_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_id_name_pairs_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def platform_agent_id_name_pairs_with_http_info(self, **kwargs):  # noqa: E501
        """Get agents (id,name)  # noqa: E501

        Get all agents names and ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_id_name_pairs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhereString filter: ids[]: array of agent ids, example: \"1;2;3\", id|name: agent id or agent name, example: \"name1\" or \"132\", name: exact agent name, example: \"name1\", statuses[]: one of: connected, connected_with_errors, disconnected, example: \"connected;connected_with_errors\", providers[]: array of providers ids, example: \"1;2;3\", tags[]: array of tags ids, example: \"1;2;3\", tags_names[]: array of tags name, example: \"name1;name2;name3\", connected[]: boolean to check if agent belongs to connection, example: \"true\",
        :return: PlatformResponseAgentFiltersObject_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_id_name_pairs" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents/filters",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentFiltersObject_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_index(self, **kwargs):  # noqa: E501
        """Get agents  # noqa: E501

        Agents index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: string: \"ASC\" | \"DESC\"
        :param WhereString filter: ids[]: array of agent ids, example: \"1;2;3\", id|name: agent id or agent name or ip, example: \"name1\" or \"132\" or \"192.168.0.1\", name: exact agent name, example: \"name1\", types[]: array of agent types, example: Windows;macOS;Linux;Virtual, statuses[]: one of: connected, connected_with_errors, disconnected, example: \"connected;connected_with_errors\", providers[]: array of providers ids, example: \"0;1;2;3\", tags[]: array of tags ids, example: \"0;1;2;3\", tags_names[]: array of tags name, example: \"name1;name2;name3\", agent_modified_at_from: date from which agent was last modified agent_modified_at_to: date to which agent was last modified agent_versions[]: array of agent versions, example: \"0.0.75;0.0.74\" locations[]: array of locations, example: \"ES;US\"
        :param bool show_logs_state:
        :return: PlatformResponseAgentFoundAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.platform_agent_index_with_http_info(**kwargs)  # noqa: E501
            return data

    def platform_agent_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get agents  # noqa: E501

        Agents index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: string: \"ASC\" | \"DESC\"
        :param WhereString filter: ids[]: array of agent ids, example: \"1;2;3\", id|name: agent id or agent name or ip, example: \"name1\" or \"132\" or \"192.168.0.1\", name: exact agent name, example: \"name1\", types[]: array of agent types, example: Windows;macOS;Linux;Virtual, statuses[]: one of: connected, connected_with_errors, disconnected, example: \"connected;connected_with_errors\", providers[]: array of providers ids, example: \"0;1;2;3\", tags[]: array of tags ids, example: \"0;1;2;3\", tags_names[]: array of tags name, example: \"name1;name2;name3\", agent_modified_at_from: date from which agent was last modified agent_modified_at_to: date to which agent was last modified agent_versions[]: array of agent versions, example: \"0.0.75;0.0.74\" locations[]: array of locations, example: \"ES;US\"
        :param bool show_logs_state:
        :return: PlatformResponseAgentFoundAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "skip",
            "take",
            "order",
            "filter",
            "show_logs_state",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_index" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "show_logs_state" in params:
            query_params.append(
                ("show-logs-state", params["show_logs_state"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentFoundAndCountObjectArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_provider_index(self, **kwargs):  # noqa: E501
        """Get agent providers  # noqa: E501

        Agent providers index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_provider_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param AgentProviderOrderString order:
        :return: PlatformResponseAgentProviderArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_provider_index_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_provider_index_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def platform_agent_provider_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get agent providers  # noqa: E501

        Agent providers index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_provider_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param AgentProviderOrderString order:
        :return: PlatformResponseAgentProviderArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["skip", "take", "order"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_provider_index" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agent-providers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentProviderArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_provider_show(self, id, **kwargs):  # noqa: E501
        """Get agent provider  # noqa: E501

        Show agent provider by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_provider_show(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber id: (required)
        :return: PlatformResponseAgentProvider_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_provider_show_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_provider_show_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def platform_agent_provider_show_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get agent provider  # noqa: E501

        Show agent provider by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_provider_show_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber id: (required)
        :return: PlatformResponseAgentProvider_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_provider_show" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `platform_agent_provider_show`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agent-providers/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentProvider_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_tag_index(self, **kwargs):  # noqa: E501
        """Get agent tags  # noqa: E501

        Get user agent tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_tag_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PlatformResponseAgentTagModelObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_tag_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.platform_agent_tag_index_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def platform_agent_tag_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get agent tags  # noqa: E501

        Get user agent tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_tag_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PlatformResponseAgentTagModelObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_tag_index" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agent-tags",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentTagModelObjectArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agent_update(self, body, agent_id, **kwargs):  # noqa: E501
        """Update agent  # noqa: E501

        Update agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_update(body, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAgentPatchObject body: (required)
        :param IdNumber agent_id: (required)
        :return: PlatformResponseSuccessBoolean_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agent_update_with_http_info(
                body, agent_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agent_update_with_http_info(
                body, agent_id, **kwargs
            )  # noqa: E501
            return data

    def platform_agent_update_with_http_info(
        self, body, agent_id, **kwargs
    ):  # noqa: E501
        """Update agent  # noqa: E501

        Update agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agent_update_with_http_info(body, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserAgentPatchObject body: (required)
        :param IdNumber agent_id: (required)
        :return: PlatformResponseSuccessBoolean_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agent_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_agent_update`"
            )  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `platform_agent_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents/{agent_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseSuccessBoolean_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_agents_destroy(self, body, **kwargs):  # noqa: E501
        """Delete agent  # noqa: E501

        Delete agent and all connections made with this agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agents_destroy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_agents_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_agents_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_agents_destroy_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete agent  # noqa: E501

        Delete agent and all connections made with this agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_agents_destroy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_agents_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_agents_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agents/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_config(self, agent_id, **kwargs):  # noqa: E501
        """Get agent wg config  # noqa: E501

        Returns agent WireGuard configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_config(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: PlatformResponseAgentWgConfig_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_config_with_http_info(agent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.platform_config_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
            return data

    def platform_config_with_http_info(self, agent_id, **kwargs):  # noqa: E501
        """Get agent wg config  # noqa: E501

        Returns agent WireGuard configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_config_with_http_info(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: PlatformResponseAgentWgConfig_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `platform_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/agent/{agent_id}/wg-config",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentWgConfig_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_logs_read_timestamp(self, body, **kwargs):  # noqa: E501
        """Get logs reads timestamps  # noqa: E501

        Save last logs read timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_logs_read_timestamp(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[LogsReadTimestampObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_logs_read_timestamp_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_logs_read_timestamp_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_logs_read_timestamp_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get logs reads timestamps  # noqa: E501

        Save last logs read timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_logs_read_timestamp_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[LogsReadTimestampObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_logs_read_timestamp" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_logs_read_timestamp`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/logs-reads-timestamp",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_delete_agents(self, body, **kwargs):  # noqa: E501
        """Delete Agents  # noqa: E501

        Delete agents. Connections with other platform agents will be destroyed. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_delete_agents(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteAgentsRequestV1Inner] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_delete_agents_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_delete_agents_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_delete_agents_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete Agents  # noqa: E501

        Delete agents. Connections with other platform agents will be destroyed. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_delete_agents_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteAgentsRequestV1Inner] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_delete_agents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_delete_agents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/agents/delete",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_get_agents(self, body, **kwargs):  # noqa: E501
        """Get Agents  # noqa: E501

        Return a list of agents. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_get_agents(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetAgentsRequestV1 body: (required)
        :return: PlatformResponseV1GetAgentsResponseV1_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_get_agents_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_get_agents_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_get_agents_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get Agents  # noqa: E501

        Return a list of agents. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_get_agents_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetAgentsRequestV1 body: (required)
        :return: PlatformResponseV1GetAgentsResponseV1_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_get_agents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_get_agents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/agents",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseV1GetAgentsResponseV1_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
