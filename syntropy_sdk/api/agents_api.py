# coding: utf-8

"""
    Syntropy network API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@syntropynet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from syntropy_sdk.api_client import ApiClient


class AgentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_network_agents_coordinates_search(self, body, **kwargs):  # noqa: E501
        """Search Agent location coordinates  # noqa: E501

        Retrieves Agents location coordinates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_coordinates_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoordinatesSearchBody body: (required)
        :return: V1NetworkAgentsCoordinatesSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_coordinates_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_coordinates_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_coordinates_search_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Search Agent location coordinates  # noqa: E501

        Retrieves Agents location coordinates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_coordinates_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CoordinatesSearchBody body: (required)
        :return: V1NetworkAgentsCoordinatesSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_coordinates_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_coordinates_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/coordinates/search",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsCoordinatesSearchResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_create(self, body, **kwargs):  # noqa: E501
        """Create Agent  # noqa: E501

        Creates new agent. Only `VIRTUAL` agents creation is supported. Not `VIRTUAL` agents are automatically created when first WebSocket connection is established.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsCreateRequest body: (required)
        :return: V1NetworkAgentsCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_create_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_create_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Agent  # noqa: E501

        Creates new agent. Only `VIRTUAL` agents creation is supported. Not `VIRTUAL` agents are automatically created when first WebSocket connection is established.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsCreateRequest body: (required)
        :return: V1NetworkAgentsCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_create" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_create`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsCreateResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_delete(self, agent_id, **kwargs):  # noqa: E501
        """Delete Agent  # noqa: E501

        Deletes Agent with existing connections. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_delete(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_delete_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_delete_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_delete_with_http_info(self, agent_id, **kwargs):  # noqa: E501
        """Delete Agent  # noqa: E501

        Deletes Agent with existing connections. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_delete_with_http_info(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `v1_network_agents_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/{agent_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_filters_search(self, body, **kwargs):  # noqa: E501
        """Search Agent filters  # noqa: E501

        Gets all unique Agents names and ids for filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_filters_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSearchRequest body: (required)
        :return: V1NetworkAgentsFiltersSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_filters_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_filters_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_filters_search_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Search Agent filters  # noqa: E501

        Gets all unique Agents names and ids for filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_filters_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSearchRequest body: (required)
        :return: V1NetworkAgentsFiltersSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_filters_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_filters_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/filters/search",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsFiltersSearchResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_get(self, **kwargs):  # noqa: E501
        """Get Agents  # noqa: E501

        Returns list of Agents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param WhereString filter: array of agent ids
        :return: V1NetworkAgentsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_network_agents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_network_agents_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agents  # noqa: E501

        Returns list of Agents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param WhereString filter: array of agent ids
        :return: V1NetworkAgentsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["skip", "take", "filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_logs_errors_search(self, body, **kwargs):  # noqa: E501
        """Search Agent error logs  # noqa: E501

        Returns a list of Agent error logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_errors_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsLogsErrorsSearchRequest body: (required)
        :return: V1NetworkAgentsLogsErrorsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_logs_errors_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_logs_errors_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_logs_errors_search_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Search Agent error logs  # noqa: E501

        Returns a list of Agent error logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_errors_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsLogsErrorsSearchRequest body: (required)
        :return: V1NetworkAgentsLogsErrorsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_logs_errors_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_logs_errors_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/logs/errors/search",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsLogsErrorsSearchResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_logs_reads_timestamp_search(
        self, body, **kwargs
    ):  # noqa: E501
        """Save log read timestamp  # noqa: E501

        Saves last logs read timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_reads_timestamp_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1NetworkAgentsLogsReadsTimestampSearchRequest] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_logs_reads_timestamp_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_logs_reads_timestamp_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_logs_reads_timestamp_search_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Save log read timestamp  # noqa: E501

        Saves last logs read timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_reads_timestamp_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V1NetworkAgentsLogsReadsTimestampSearchRequest] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_logs_reads_timestamp_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_logs_reads_timestamp_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/logs-reads-timestamp",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_logs_search(self, body, **kwargs):  # noqa: E501
        """Search Agent logs  # noqa: E501

        Search Agent logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsLogsSearchRequest body: (required)
        :return: V1NetworkAgentsLogsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_logs_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_logs_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_logs_search_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Search Agent logs  # noqa: E501

        Search Agent logs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_logs_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsLogsSearchRequest body: (required)
        :return: V1NetworkAgentsLogsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_logs_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_logs_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/logs/search",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsLogsSearchResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_providers_get(self, **kwargs):  # noqa: E501
        """Get Agent providers  # noqa: E501

        Returns list of Agent providers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param AgentProviderOrderString order:
        :param WhereString filter: array of agent provider ids
        :return: V1NetworkAgentsProvidersGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_providers_get_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_providers_get_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agent providers  # noqa: E501

        Returns list of Agent providers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param AgentProviderOrderString order:
        :param WhereString filter: array of agent provider ids
        :return: V1NetworkAgentsProvidersGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["skip", "take", "order", "filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_providers_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/providers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsProvidersGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_remove(self, body, **kwargs):  # noqa: E501
        """Delete Agents  # noqa: E501

        Deletes Agents with existing connections. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_remove(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsRemoveRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_remove_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_remove_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_remove_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete Agents  # noqa: E501

        Deletes Agents with existing connections. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_remove_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsRemoveRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_remove" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_remove`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_search(self, body, **kwargs):  # noqa: E501
        """Search Agents  # noqa: E501

        Return a list of agents. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSearchRequest body: (required)
        :return: V1NetworkAgentsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_search_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_search_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Agents  # noqa: E501

        Return a list of agents. Learn more about platform agents [here](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSearchRequest body: (required)
        :return: V1NetworkAgentsSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_search" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_search`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/search",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsSearchResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_services_delete(
        self, agent_service_subnet_id, **kwargs
    ):  # noqa: E501
        """Delete Agent service  # noqa: E501

        Deletes Agent service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_delete(agent_service_subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_service_subnet_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_services_delete_with_http_info(
                agent_service_subnet_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_services_delete_with_http_info(
                agent_service_subnet_id, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_services_delete_with_http_info(
        self, agent_service_subnet_id, **kwargs
    ):  # noqa: E501
        """Delete Agent service  # noqa: E501

        Deletes Agent service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_delete_with_http_info(agent_service_subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_service_subnet_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["agent_service_subnet_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_services_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'agent_service_subnet_id' is set
        if (
            "agent_service_subnet_id" not in params
            or params["agent_service_subnet_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `agent_service_subnet_id` when calling `v1_network_agents_services_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_service_subnet_id" in params:
            path_params["agent_service_subnet_id"] = params[
                "agent_service_subnet_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/services/{agent_service_subnet_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_services_get(self, **kwargs):  # noqa: E501
        """Get Agent services.  # noqa: E501

        Returns list of Agent services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhereString filter: array of agent ids
        :return: V1NetworkAgentsServicesGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_services_get_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_services_get_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_services_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agent services.  # noqa: E501

        Returns list of Agent services  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WhereString filter: array of agent ids
        :return: V1NetworkAgentsServicesGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_services_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/services",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsServicesGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_services_remove(self, body, **kwargs):  # noqa: E501
        """Delete Agent services  # noqa: E501

        Deletes Agent services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_remove(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsServicesRemoveRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_services_remove_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_services_remove_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_services_remove_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Delete Agent services  # noqa: E501

        Deletes Agent services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_remove_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsServicesRemoveRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_services_remove" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_services_remove`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/services/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_services_update(self, body, **kwargs):  # noqa: E501
        """Update Agent services  # noqa: E501

        Updates Agent services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsServicesUpdateRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_services_update_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_services_update_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_services_update_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Update Agent services  # noqa: E501

        Updates Agent services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_services_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsServicesUpdateRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_services_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_services_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/services/bulk",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_settings_get(self, **kwargs):  # noqa: E501
        """Get Agent settings  # noqa: E501

        Gets Agents settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_settings_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1NetworkAgentsSettingsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_settings_get_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_settings_get_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_settings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agent settings  # noqa: E501

        Gets Agents settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_settings_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1NetworkAgentsSettingsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_settings_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/settings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsSettingsGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_settings_update(self, body, **kwargs):  # noqa: E501
        """Update Agent settings  # noqa: E501

        Updates Agents settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_settings_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSettingsUpdateRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_settings_update_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_settings_update_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_settings_update_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Update Agent settings  # noqa: E501

        Updates Agents settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_settings_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsSettingsUpdateRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_settings_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_settings_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/settings",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_tags_get(self, **kwargs):  # noqa: E501
        """Get Agent tags  # noqa: E501

        Returns a list of user Agent tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_tags_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1NetworkAgentsTagsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_tags_get_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_tags_get_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_tags_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Agent tags  # noqa: E501

        Returns a list of user Agent tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_tags_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: V1NetworkAgentsTagsGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_tags_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/tags",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsTagsGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_update(self, body, agent_id, **kwargs):  # noqa: E501
        """Updates Agent  # noqa: E501

        Update Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_update(body, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsUpdateRequest body: (required)
        :param IdNumber agent_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_update_with_http_info(
                body, agent_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_update_with_http_info(
                body, agent_id, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_update_with_http_info(
        self, body, agent_id, **kwargs
    ):  # noqa: E501
        """Updates Agent  # noqa: E501

        Update Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_update_with_http_info(body, agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1NetworkAgentsUpdateRequest body: (required)
        :param IdNumber agent_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_network_agents_update`"
            )  # noqa: E501
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `v1_network_agents_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/{agent_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_network_agents_wg_config_get_one(self, agent_id, **kwargs):  # noqa: E501
        """Get Agent Wg config  # noqa: E501

        Returns Agents WireGuard configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_wg_config_get_one(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: V1NetworkAgentsWgConfigGetOneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_network_agents_wg_config_get_one_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_network_agents_wg_config_get_one_with_http_info(
                agent_id, **kwargs
            )  # noqa: E501
            return data

    def v1_network_agents_wg_config_get_one_with_http_info(
        self, agent_id, **kwargs
    ):  # noqa: E501
        """Get Agent Wg config  # noqa: E501

        Returns Agents WireGuard configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_network_agents_wg_config_get_one_with_http_info(agent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNumber agent_id: (required)
        :return: V1NetworkAgentsWgConfigGetOneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["agent_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_network_agents_wg_config_get_one" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'agent_id' is set
        if "agent_id" not in params or params["agent_id"] is None:
            raise ValueError(
                "Missing the required parameter `agent_id` when calling `v1_network_agents_wg_config_get_one`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "agent_id" in params:
            path_params["agent_id"] = params["agent_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/network/agents/wg-config/{agent_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1NetworkAgentsWgConfigGetOneResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
