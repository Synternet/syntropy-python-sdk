# coding: utf-8

"""
    syntropy-controller

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from syntropy_sdk.api_client import ApiClient


class ConnectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def platform_connection_agents_destroy(self, body, **kwargs):  # noqa: E501
        """Delete connections  # noqa: E501

        Deletes agent connections. Agent itself is not deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_agents_destroy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_agents_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_agents_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connection_agents_destroy_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Delete connections  # noqa: E501

        Deletes agent connections. Agent itself is not deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_agents_destroy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_agents_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_agents_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/agents/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connections_destroy_deprecated(self, body, **kwargs):  # noqa: E501
        """Delete connections  # noqa: E501

        Deletes connections between agents. Agent itself is not deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_agents_destroy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connections_destroy_deprecated_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connections_destroy_deprecated_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connections_destroy_deprecated_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Delete connections  # noqa: E501

        Deletes connections between agents. Agent itself is not deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_agents_destroy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentsObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_agents_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_agents_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_create_mesh(self, body, **kwargs):  # noqa: E501
        """Create connections (mesh)  # noqa: E501

        Create mesh of connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_create_mesh(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionCreationBodyMesh body: (required)
        :param list[str] paths: Comma separated servers ids list for SDN path.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_create_mesh_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_create_mesh_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connection_create_mesh_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Create connections (mesh)  # noqa: E501

        Create mesh of connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_create_mesh_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionCreationBodyMesh body: (required)
        :param list[str] paths: Comma separated servers ids list for SDN path.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "paths"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_create_mesh" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_create_mesh`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "paths" in params:
            query_params.append(("paths", params["paths"]))  # noqa: E501
            collection_formats["paths"] = "multi"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/mesh",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_create_p2p(self, body, **kwargs):  # noqa: E501
        """Create connections (p2p)  # noqa: E501

        Create connections for agents pairs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_create_p2p(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionCreationBodyP2p body: (required)
        :param list[str] paths: Comma separated servers ids list for SDN path.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_create_p2p_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_create_p2p_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connection_create_p2p_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Create connections (p2p)  # noqa: E501

        Create connections for agents pairs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_create_p2p_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnectionCreationBodyP2p body: (required)
        :param list[str] paths: Comma separated servers ids list for SDN path.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "paths"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_create_p2p" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_create_p2p`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "paths" in params:
            query_params.append(("paths", params["paths"]))  # noqa: E501
            collection_formats["paths"] = "multi"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/point-to-point",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_groups_destroy(self, body, **kwargs):  # noqa: E501
        """Delete connections (groups)  # noqa: E501

        Deletes `connections` and `connections groups` by groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_destroy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentConnectionGroupIdObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_groups_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_groups_destroy_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connection_groups_destroy_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Delete connections (groups)  # noqa: E501

        Deletes `connections` and `connections groups` by groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_destroy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AgentConnectionGroupIdObject] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_groups_destroy" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_groups_destroy`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/groups/remove",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_groups_index(self, **kwargs):  # noqa: E501
        """Get connections (groups)  # noqa: E501

        Retrieves connection groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: agent_connection_group_id | agent_1_name | agent_2_name | agent_connection_group_updated_at: \"ASC\" | \"DESC\"
        :param WhereString filter: ids[]: array of connection group ids ids, example: \"1;2;3\",
        :return: PlatformResponseAgentConnGroupFindAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_groups_index_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_groups_index_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def platform_connection_groups_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get connections (groups)  # noqa: E501

        Retrieves connection groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: agent_connection_group_id | agent_1_name | agent_2_name | agent_connection_group_updated_at: \"ASC\" | \"DESC\"
        :param WhereString filter: ids[]: array of connection group ids ids, example: \"1;2;3\",
        :return: PlatformResponseAgentConnGroupFindAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["skip", "take", "order", "filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_groups_index" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentConnGroupFindAndCountObjectArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_groups_sdn_toggle(self, body, **kwargs):  # noqa: E501
        """Toggles SDN for specific connection  # noqa: E501

        Enables or disables SDN for specified connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_sdn_toggle(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnGroupSdnToggleObject body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_groups_sdn_toggle_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.platform_connection_groups_sdn_toggle_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def platform_connection_groups_sdn_toggle_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Toggles SDN for specific connection  # noqa: E501

        Enables or disables SDN for specified connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_groups_sdn_toggle_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConnGroupSdnToggleObject body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_groups_sdn_toggle" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `platform_connection_groups_sdn_toggle`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections/groups",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def platform_connection_index(self, **kwargs):  # noqa: E501
        """Get connections  # noqa: E501

        Retrieves connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: string: \"ASC\" | \"DESC\"
        :param WhereString filter: id|name: string, example: \"1\" or \"name\", connectionId: string, example: \"1\", name: exact agent name, example: \"name1\", agent_ids[]: array of agent ids, example: \"1;2;3\", statuses[]: array of statuses, one of PENDING, WARNING, ERROR, CONNECTED, OFFLINE, example: \"OFFLINE;ERROR;WARNING\", providers[]: array of providers ids, example: \"1;2;3\", agent_connection_updated_at_from: date from which connection was last modified, agent_connection_updated_at_to: date to which connection was last modified
        :param ShowSdnConnections show_sdn_connections:
        :param bool load_relations:
        :return: PlatformResponseAgentConnectionFindAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.platform_connection_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.platform_connection_index_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def platform_connection_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get connections  # noqa: E501

        Retrieves connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.platform_connection_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkipNumber skip:
        :param TakeNumber take:
        :param OrderString order: string: \"ASC\" | \"DESC\"
        :param WhereString filter: id|name: string, example: \"1\" or \"name\", connectionId: string, example: \"1\", name: exact agent name, example: \"name1\", agent_ids[]: array of agent ids, example: \"1;2;3\", statuses[]: array of statuses, one of PENDING, WARNING, ERROR, CONNECTED, OFFLINE, example: \"OFFLINE;ERROR;WARNING\", providers[]: array of providers ids, example: \"1;2;3\", agent_connection_updated_at_from: date from which connection was last modified, agent_connection_updated_at_to: date to which connection was last modified
        :param ShowSdnConnections show_sdn_connections:
        :param bool load_relations:
        :return: PlatformResponseAgentConnectionFindAndCountObjectArray_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "skip",
            "take",
            "order",
            "filter",
            "show_sdn_connections",
            "load_relations",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method platform_connection_index" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "skip" in params:
            query_params.append(("skip", params["skip"]))  # noqa: E501
        if "take" in params:
            query_params.append(("take", params["take"]))  # noqa: E501
        if "order" in params:
            query_params.append(("order", params["order"]))  # noqa: E501
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "show_sdn_connections" in params:
            query_params.append(
                ("show-sdn-connections", params["show_sdn_connections"])
            )  # noqa: E501
        if "load_relations" in params:
            query_params.append(
                ("load-relations", params["load_relations"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/connections",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseAgentConnectionFindAndCountObjectArray_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_create_connections_mesh(self, body, **kwargs):  # noqa: E501
        """Create Connections Mesh  # noqa: E501

        Create connections mesh. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_create_connections_mesh(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConnectionsMeshRequestV1 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_create_connections_mesh_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_create_connections_mesh_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_create_connections_mesh_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Create Connections Mesh  # noqa: E501

        Create connections mesh. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_create_connections_mesh_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateConnectionsMeshRequestV1 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_create_connections_mesh" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_create_connections_mesh`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/connections/mesh",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_create_p2p_connections(self, body, **kwargs):  # noqa: E501
        """Create P2P Connections  # noqa: E501

        Create point to point connections. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_create_p2p_connections(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateP2pConnectionsRequestV1 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_create_p2p_connections_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_create_p2p_connections_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_create_p2p_connections_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Create P2P Connections  # noqa: E501

        Create point to point connections. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_create_p2p_connections_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateP2pConnectionsRequestV1 body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_create_p2p_connections" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_create_p2p_connections`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/connections/point-to-point",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_delete_connections_groups(self, body, **kwargs):  # noqa: E501
        """Delete Connections  # noqa: E501

        Delete connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_delete_connections_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteConnectionsGroupsRequestV1Inner] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_delete_connections_groups_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_delete_connections_groups_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_delete_connections_groups_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Delete Connections  # noqa: E501

        Delete connections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_delete_connections_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeleteConnectionsGroupsRequestV1Inner] body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_delete_connections_groups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_delete_connections_groups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/connections/groups/delete",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v1_platform_get_connections_groups(self, body, **kwargs):  # noqa: E501
        """Get Connections  # noqa: E501

        Return connections. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_get_connections_groups(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetConnectionsGroupsRequestV1 body: (required)
        :return: PlatformResponseV1GetConnectionsGroupsResponseV1_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v1_platform_get_connections_groups_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.v1_platform_get_connections_groups_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def v1_platform_get_connections_groups_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Get Connections  # noqa: E501

        Return connections. Learn more about connections [here (wrong link, need section!)](https://docs.syntropystack.com/docs/what-is-syntropy-agent).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_platform_get_connections_groups_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GetConnectionsGroupsRequestV1 body: (required)
        :return: PlatformResponseV1GetConnectionsGroupsResponseV1_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_platform_get_connections_groups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v1_platform_get_connections_groups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["jwt"]  # noqa: E501

        return self.api_client.call_api(
            "/api/platform/v1/connections/groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PlatformResponseV1GetConnectionsGroupsResponseV1_",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
